{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Installation Guide These pages should help you to get started setting up the computing environment on your machine ready for the course \"Programming Practices for Research in Economics\" at the University of Zurich in Winter 2020 . Please attempt to install necessary software and packages prior to the beginning of the course. Summary If everything goes smoothly, you should be able to complete the installation in one sitting which should take about 2 hours. Please follow the steps one-by-one in the order they appear on the side bar and do not deviate from them, unless you really know what you are doing. If you find any outdated links or unclear descriptions, email us at pp4rs.contact@gmail.com so that we can update the instructions or clarify as needed. Where necessary, we have provided instructions for Mac, Windows and Linux machines. Windows Users This version of the installation guide contains a new approach to setting up your machine compared to our previous courses. If you previously sat in any of the Programming Practices courses in 2018 or 2019, you will need to work through this guide from start to finish.","title":"Welcome"},{"location":"#installation-guide","text":"These pages should help you to get started setting up the computing environment on your machine ready for the course \"Programming Practices for Research in Economics\" at the University of Zurich in Winter 2020 . Please attempt to install necessary software and packages prior to the beginning of the course. Summary If everything goes smoothly, you should be able to complete the installation in one sitting which should take about 2 hours. Please follow the steps one-by-one in the order they appear on the side bar and do not deviate from them, unless you really know what you are doing. If you find any outdated links or unclear descriptions, email us at pp4rs.contact@gmail.com so that we can update the instructions or clarify as needed. Where necessary, we have provided instructions for Mac, Windows and Linux machines. Windows Users This version of the installation guide contains a new approach to setting up your machine compared to our previous courses. If you previously sat in any of the Programming Practices courses in 2018 or 2019, you will need to work through this guide from start to finish.","title":"Installation Guide"},{"location":"acknowledgement/","text":"Acknowledgements This module is based on the previous versions of the course: 2017 edition , by Lachlan Deer, Adrian Etter, Julian Langer & Max Winkler 2018 edition , by Ulrich Bergmann, Ursina Schaede, Dora Simon, Carlo Zanella & Christian Zuend 2019 Foundations edition , by Lachlan Deer & Julian Langer It is designed after and borrows a lot from: Effective Programming Practices for Economists , a course by Hans-Martin von Gaudecker Software Carpentry's Managing Software Research Projects lesson","title":"Acknowledgements"},{"location":"acknowledgement/#acknowledgements","text":"This module is based on the previous versions of the course: 2017 edition , by Lachlan Deer, Adrian Etter, Julian Langer & Max Winkler 2018 edition , by Ulrich Bergmann, Ursina Schaede, Dora Simon, Carlo Zanella & Christian Zuend 2019 Foundations edition , by Lachlan Deer & Julian Langer It is designed after and borrows a lot from: Effective Programming Practices for Economists , a course by Hans-Martin von Gaudecker Software Carpentry's Managing Software Research Projects lesson","title":"Acknowledgements"},{"location":"citation-license/","text":"License Material is licensed under a CC-BY-NC-SA license. Further information is available at our course homepage Suggested Citation Ulrich Bergmann Matteo Courthoud and Lachlan Deer, 2020, Installation Guide , Programming Practices for Research in Economics, University of Zurich","title":"Citation & License"},{"location":"citation-license/#license","text":"Material is licensed under a CC-BY-NC-SA license. Further information is available at our course homepage","title":"License"},{"location":"citation-license/#suggested-citation","text":"Ulrich Bergmann Matteo Courthoud and Lachlan Deer, 2020, Installation Guide , Programming Practices for Research in Economics, University of Zurich","title":"Suggested Citation"},{"location":"commandLine/","text":"Command Line Tools A command-line interface or command language interpreter (CLI), also known as a terminal, is a means of interacting with a computer program where the user issues commands to the program in the form of successive lines of text. Throughout the course we will emphasize use of the terminal and executing commands within it as our modus operandi. Mac Users A command line interface comes already installed with OSX. You will need to install some other software from the terminal throughout the course, so it will be useful to install some additional \"command line tools\" now. Opening a Terminal Session To open a terminal session: Open spotlight with cmd + space Type in 'terminal' When the terminal appears, open it. Installing New Tools for the Terminal The X-code Tools We want to install 'X-code command line tools'. Copy and paste the following and press Return 1 xcode-select --install If you get a message that the command line tools are already installed, you can continue to the next step. Homebrew Package Manager Homebrew is a package manager for Mac. Install Homebrew by opening a terminal and pasting the following command: 1 ruby -e \" $( curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install ) \" Verify that Homebrew installed correctly, enter the following into your terminal: 1 brew doctor And you should see the following output: 1 Your system is ready to brew Before continuing, lets be sure everything in Homebrew is up to date by entering the following: 1 brew upgrade Installing Packages with Homebrew Now we can use homebrew to easily install software. We need some basic system tools for some of the programs we will install later. In particular we need: libxml2 openssl libgit2 Most of these are already installed, but we need updates of these packages. For each of these packages enter: 1 brew reinstall pkg-name i.e. brew reinstall libxml2 . If you get a message that the package you are trying to reinstall is not yet installed, try brew install pkg-name instead. Linking Packages to a Terminal Session We need to ensure that our terminal session has access to what we installed. To do this we add some extra lines to our bash profile (we will discuss what this means in class - do what we say for now): 1 2 3 echo 'export PATH=\"/usr/local/opt/libxml2/bin:$PATH\"' >> ~/.bash_profile echo 'export PATH=\"/usr/local/opt/openssl/bin:$PATH\"' >> ~/.bash_profile source .bash_profile Linux & Windows Users Linux Users: Open a terminal session with Ctrl + Alt + T . Windows Users: Open the Ubuntu Terminal as we described here Copy the following command into terminal and press Return : 1 2 sudo apt-get update sudo apt-get install libcurl4-gnutls-dev librtmp-dev After the installation succeeded successfully repeat this one-by-one with the following two other commands: 1 2 3 sudo apt-get install libxml2-dev sudo apt-get install libssl-dev sudo apt-get install gdebi-core Windows Users: Copy and Paste The 'traditional' Ctrl + C and Ctrl + v doesn't work with your terminal because as Ctrl + Key commands have a special meaning. To save manually writing stuff in there's two alternatives: * Use the 'Linux' copy and paste commands: copy is Ctrl + Shift + C and paste is Ctrl + Shift + V . * Highlight the text with you cursor, and then in the terminal use your mouses right-click to paste it in. Windows Users: Library Installation At some point in the install process you may see a screen like this one: Here you need to make a choice, which you do by using the left and right arrows followed by Return . Lachlan chose, 'No' - but you can safely choose yes without your computer burning down. Whenever you get these kinds of screens, you can scroll up and down with the up and down buttons if needed and make decisions by selecting a choice as described above.","title":"Command Line Tools"},{"location":"commandLine/#command-line-tools","text":"A command-line interface or command language interpreter (CLI), also known as a terminal, is a means of interacting with a computer program where the user issues commands to the program in the form of successive lines of text. Throughout the course we will emphasize use of the terminal and executing commands within it as our modus operandi.","title":"Command Line Tools"},{"location":"commandLine/#mac-users","text":"A command line interface comes already installed with OSX. You will need to install some other software from the terminal throughout the course, so it will be useful to install some additional \"command line tools\" now.","title":"Mac Users"},{"location":"commandLine/#opening-a-terminal-session","text":"To open a terminal session: Open spotlight with cmd + space Type in 'terminal' When the terminal appears, open it.","title":"Opening a Terminal Session"},{"location":"commandLine/#installing-new-tools-for-the-terminal","text":"","title":"Installing New Tools for the Terminal"},{"location":"commandLine/#the-x-code-tools","text":"We want to install 'X-code command line tools'. Copy and paste the following and press Return 1 xcode-select --install If you get a message that the command line tools are already installed, you can continue to the next step.","title":"The X-code Tools"},{"location":"commandLine/#homebrew-package-manager","text":"Homebrew is a package manager for Mac. Install Homebrew by opening a terminal and pasting the following command: 1 ruby -e \" $( curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install ) \" Verify that Homebrew installed correctly, enter the following into your terminal: 1 brew doctor And you should see the following output: 1 Your system is ready to brew Before continuing, lets be sure everything in Homebrew is up to date by entering the following: 1 brew upgrade","title":"Homebrew Package Manager"},{"location":"commandLine/#installing-packages-with-homebrew","text":"Now we can use homebrew to easily install software. We need some basic system tools for some of the programs we will install later. In particular we need: libxml2 openssl libgit2 Most of these are already installed, but we need updates of these packages. For each of these packages enter: 1 brew reinstall pkg-name i.e. brew reinstall libxml2 . If you get a message that the package you are trying to reinstall is not yet installed, try brew install pkg-name instead.","title":"Installing Packages with Homebrew"},{"location":"commandLine/#linking-packages-to-a-terminal-session","text":"We need to ensure that our terminal session has access to what we installed. To do this we add some extra lines to our bash profile (we will discuss what this means in class - do what we say for now): 1 2 3 echo 'export PATH=\"/usr/local/opt/libxml2/bin:$PATH\"' >> ~/.bash_profile echo 'export PATH=\"/usr/local/opt/openssl/bin:$PATH\"' >> ~/.bash_profile source .bash_profile","title":"Linking Packages to a Terminal Session"},{"location":"commandLine/#linux-windows-users","text":"Linux Users: Open a terminal session with Ctrl + Alt + T . Windows Users: Open the Ubuntu Terminal as we described here Copy the following command into terminal and press Return : 1 2 sudo apt-get update sudo apt-get install libcurl4-gnutls-dev librtmp-dev After the installation succeeded successfully repeat this one-by-one with the following two other commands: 1 2 3 sudo apt-get install libxml2-dev sudo apt-get install libssl-dev sudo apt-get install gdebi-core Windows Users: Copy and Paste The 'traditional' Ctrl + C and Ctrl + v doesn't work with your terminal because as Ctrl + Key commands have a special meaning. To save manually writing stuff in there's two alternatives: * Use the 'Linux' copy and paste commands: copy is Ctrl + Shift + C and paste is Ctrl + Shift + V . * Highlight the text with you cursor, and then in the terminal use your mouses right-click to paste it in. Windows Users: Library Installation At some point in the install process you may see a screen like this one: Here you need to make a choice, which you do by using the left and right arrows followed by Return . Lachlan chose, 'No' - but you can safely choose yes without your computer burning down. Whenever you get these kinds of screens, you can scroll up and down with the up and down buttons if needed and make decisions by selecting a choice as described above.","title":"Linux &amp; Windows Users"},{"location":"contact/","text":"Contact Us Questions or Comments Please contact us via email: 1 pp4rs.contact \"AT\" gmail.com with the title \"Installation Guide: Programming Practices for Research in Economics.\" We look forward to hearing from you if you have questions about the installation guide, found this installation guide useful, or have further comments or suggestions to improve it. Programming Practices Team Programming Practices for Research in Economics was created by Lachlan Deer Adrian Etter Julian Langer Max Winkler at the Department of Economics, University of Zurich in 2016. This installation guide is for the 2020 edition, conducted by Ulrich Bergmann Lachlan Deer Matteo Courthoud","title":"Contact Us"},{"location":"contact/#contact-us","text":"","title":"Contact Us"},{"location":"contact/#questions-or-comments","text":"Please contact us via email: 1 pp4rs.contact \"AT\" gmail.com with the title \"Installation Guide: Programming Practices for Research in Economics.\" We look forward to hearing from you if you have questions about the installation guide, found this installation guide useful, or have further comments or suggestions to improve it.","title":"Questions or Comments"},{"location":"contact/#programming-practices-team","text":"Programming Practices for Research in Economics was created by Lachlan Deer Adrian Etter Julian Langer Max Winkler at the Department of Economics, University of Zurich in 2016. This installation guide is for the 2020 edition, conducted by Ulrich Bergmann Lachlan Deer Matteo Courthoud","title":"Programming Practices Team"},{"location":"finish-line/","text":"Installation Guide Complete Congrats! You've made it to the end of the Installation Guide. See you in class soon!","title":"The Finish Line!"},{"location":"finish-line/#installation-guide-complete","text":"Congrats! You've made it to the end of the Installation Guide. See you in class soon!","title":"Installation Guide Complete"},{"location":"gitInstall/","text":"Installing Git and Setting Up Accounts Git is a Version Control System (VCS) that has gained a lot of traction among the programming community. We will want to use version control to keep track of the files we write, and the changes we make to them. Account Creation During the course we will show you how to use GitHub to host some of your work and do code related project management. You will need to set up an account: Please register for a GitHub account When choosing a username we recommend not using a name that includes an employer or university in case you move later on i.e. 'johnsmith' or 'johnsmith86' are OK, 'johnsmithUZH' probably not Mac Users Installing Git We will install Git using Homebrew. Enter the following lines of code into your terminal: 1 2 brew install git brew link --force git Then close and reopen the terminal. Now Verify your installation Autocompletion When we code we want to be lazy - we don't always want to write out the whole line of code we want to enter, and would prefer the computer to autocomplete our line of code for us. The OSX terminal doesn't have this autocompletion by default, so let's add it using our trusty friend Homebrew. Open a terminal and enter: 1 brew install auto-completion This installs 'bash completion' into a file /usr/local/etc/bash_completion.d . To make the autocompletion work, type the following into your terminal: 1 echo \"[ -f /usr/local/etc/bash_completion ] && . /usr/local/etc/bash_completion\" >> ~/.bash_profile And restart your terminal session: 1 source ~/.bash_profile Checking Autocomplete works Now you can autocomplete by pressing tab twice after a command. We will demonstrate this in class. For now, enter the following into you terminal and press tab twice (which we depict as [tab] [tab] ) below: 1 git [ tab ] [ tab ] which will then show: 1 2 3 4 5 6 $ git [ tab ] [ tab ] add blame cherry-pick config format-patch gui merge push repack rm stage whatchanged am branch citool describe fsck help mergetool range-diff replace send-email stash worktree apply bundle clean diff gc init mv rebase request-pull shortlog status archive checkout clone difftool gitk instaweb notes reflog reset show submodule bisect cherry commit fetch grep log pull remote revert show-branch tag Linux Users Git should be installed already for you. To check if it is, enter the following in a terminal: 1 git --version If you get a bunch of numbers (ideally starting with 2.15) or higher - you are good to move on. If not, install it by entering the following into the command line: 1 sudo apt-get install git Once complete, verify your install . Windows Users Git will be already installed inside your Ubuntu terminal. Verify this, by following these instructions . Verifying your install To verify your installation, type the following command in a terminal and press the return key: 1 git --version You should get an output that looks like: 1 git version 2 .18.0 Ensure that you have a version greater than 2.15.0 installed.","title":"Git"},{"location":"gitInstall/#installing-git-and-setting-up-accounts","text":"Git is a Version Control System (VCS) that has gained a lot of traction among the programming community. We will want to use version control to keep track of the files we write, and the changes we make to them.","title":"Installing Git and Setting Up Accounts"},{"location":"gitInstall/#account-creation","text":"During the course we will show you how to use GitHub to host some of your work and do code related project management. You will need to set up an account: Please register for a GitHub account When choosing a username we recommend not using a name that includes an employer or university in case you move later on i.e. 'johnsmith' or 'johnsmith86' are OK, 'johnsmithUZH' probably not","title":"Account Creation"},{"location":"gitInstall/#mac-users","text":"","title":"Mac Users"},{"location":"gitInstall/#installing-git","text":"We will install Git using Homebrew. Enter the following lines of code into your terminal: 1 2 brew install git brew link --force git Then close and reopen the terminal. Now Verify your installation","title":"Installing Git"},{"location":"gitInstall/#autocompletion","text":"When we code we want to be lazy - we don't always want to write out the whole line of code we want to enter, and would prefer the computer to autocomplete our line of code for us. The OSX terminal doesn't have this autocompletion by default, so let's add it using our trusty friend Homebrew. Open a terminal and enter: 1 brew install auto-completion This installs 'bash completion' into a file /usr/local/etc/bash_completion.d . To make the autocompletion work, type the following into your terminal: 1 echo \"[ -f /usr/local/etc/bash_completion ] && . /usr/local/etc/bash_completion\" >> ~/.bash_profile And restart your terminal session: 1 source ~/.bash_profile","title":"Autocompletion"},{"location":"gitInstall/#checking-autocomplete-works","text":"Now you can autocomplete by pressing tab twice after a command. We will demonstrate this in class. For now, enter the following into you terminal and press tab twice (which we depict as [tab] [tab] ) below: 1 git [ tab ] [ tab ] which will then show: 1 2 3 4 5 6 $ git [ tab ] [ tab ] add blame cherry-pick config format-patch gui merge push repack rm stage whatchanged am branch citool describe fsck help mergetool range-diff replace send-email stash worktree apply bundle clean diff gc init mv rebase request-pull shortlog status archive checkout clone difftool gitk instaweb notes reflog reset show submodule bisect cherry commit fetch grep log pull remote revert show-branch tag","title":"Checking Autocomplete works"},{"location":"gitInstall/#linux-users","text":"Git should be installed already for you. To check if it is, enter the following in a terminal: 1 git --version If you get a bunch of numbers (ideally starting with 2.15) or higher - you are good to move on. If not, install it by entering the following into the command line: 1 sudo apt-get install git Once complete, verify your install .","title":"Linux Users"},{"location":"gitInstall/#windows-users","text":"Git will be already installed inside your Ubuntu terminal. Verify this, by following these instructions .","title":"Windows Users"},{"location":"gitInstall/#verifying-your-install","text":"To verify your installation, type the following command in a terminal and press the return key: 1 git --version You should get an output that looks like: 1 git version 2 .18.0 Ensure that you have a version greater than 2.15.0 installed.","title":"Verifying your install"},{"location":"pandoc/","text":"LaTeX LaTeX is a document preparation system for high-quality typesetting most often used for medium-to-large technical or scientific documents. Most of you probably have some familiarity with LaTeX from your Master's Theses. We may want to build some PDF documents throughout the course using LaTeX - so let's install it. LaTeX Install for Mac We again install from Homebrew. Enter the following into the terminal: 1 brew cask install mactex LaTeX Install for Linux & Windows LaTeX can be installed from the terminal by entering the following command and pressing Return : 1 sudo apt-get install texlive-latex-extra Check everything went according to plan: 1 tex --version which gives the following output: 1 2 3 4 5 6 7 8 9 TeX 3 .14159265 ( TeX Live 2019 /Debian ) kpathsea version 6 .3.1 Copyright 2019 D.E. Knuth. There is NO warranty. Redistribution of this software is covered by the terms of both the TeX copyright and the Lesser GNU General Public License. For more information about these matters, see the file named COPYING and the TeX source. Primary author of TeX: D.E. Knuth. Pandoc Pandoc is an extremely useful 'swiss army knife' for converting between different types of markup languages from the command line. For example, it readily builds PDFs with latex, and markdown - both of which are heavily used in academic research. Note We do not actively teach how to use Pandoc in the course - but we will utilize it in some lessons where we produce PDF, Word or HTML output from plain text files. Pandoc Install for Linux & Windows Open a terminal window and type 1 sudo apt install pandoc to install pandoc from the command line Pandoc Install for Mac In a terminal window and type: 1 brew install pandoc Now verify your install . Verify Pandoc Install Verify your install by typing the following into a command line: 1 pandoc --version The expected output starts with the following information: 1 pandoc 2 .2.x.x Ensure you have at least version 2.1.1 installed.","title":"LaTeX & Pandoc"},{"location":"pandoc/#latex","text":"LaTeX is a document preparation system for high-quality typesetting most often used for medium-to-large technical or scientific documents. Most of you probably have some familiarity with LaTeX from your Master's Theses. We may want to build some PDF documents throughout the course using LaTeX - so let's install it.","title":"LaTeX"},{"location":"pandoc/#latex-install-for-mac","text":"We again install from Homebrew. Enter the following into the terminal: 1 brew cask install mactex","title":"LaTeX Install for Mac"},{"location":"pandoc/#latex-install-for-linux-windows","text":"LaTeX can be installed from the terminal by entering the following command and pressing Return : 1 sudo apt-get install texlive-latex-extra Check everything went according to plan: 1 tex --version which gives the following output: 1 2 3 4 5 6 7 8 9 TeX 3 .14159265 ( TeX Live 2019 /Debian ) kpathsea version 6 .3.1 Copyright 2019 D.E. Knuth. There is NO warranty. Redistribution of this software is covered by the terms of both the TeX copyright and the Lesser GNU General Public License. For more information about these matters, see the file named COPYING and the TeX source. Primary author of TeX: D.E. Knuth.","title":"LaTeX Install for Linux &amp; Windows"},{"location":"pandoc/#pandoc","text":"Pandoc is an extremely useful 'swiss army knife' for converting between different types of markup languages from the command line. For example, it readily builds PDFs with latex, and markdown - both of which are heavily used in academic research. Note We do not actively teach how to use Pandoc in the course - but we will utilize it in some lessons where we produce PDF, Word or HTML output from plain text files.","title":"Pandoc"},{"location":"pandoc/#pandoc-install-for-linux-windows","text":"Open a terminal window and type 1 sudo apt install pandoc to install pandoc from the command line","title":"Pandoc Install for Linux &amp; Windows"},{"location":"pandoc/#pandoc-install-for-mac","text":"In a terminal window and type: 1 brew install pandoc Now verify your install .","title":"Pandoc Install for Mac"},{"location":"pandoc/#verify-pandoc-install","text":"Verify your install by typing the following into a command line: 1 pandoc --version The expected output starts with the following information: 1 pandoc 2 .2.x.x Ensure you have at least version 2.1.1 installed.","title":"Verify Pandoc Install"},{"location":"path-setting/","text":"Making Path Settings Permanent For our workflow be be command line driven, we need to be able to call software from the command line. Whilst much of the software we have installed as automatically made this possible, it is not universally the case. Here we will make the extra few changes we need to complete the installation guide. Windows Users (for Windows 8 and 10) You will need local administration rights for your computer, but you should have these on your personal computers or ones owned by the Department. Right-click on Computer. Then go to \"Properties\" and select the tab \"Advanced System settings\". Choose \"Environment Variables\" and select \"Path\" from the list of system variables. Choose \u201cEdit\u201d and append (i.e., do not overwrite the previous value): 1 ; C : \\ Path \\ to \\ program . exe to the variable value \u2013 make sure the rest remains as it is and do not include spaces between the \";\" and the text. Click on OK as often as needed. If you accepted all defaults during your installation, and didn't have any other non-default setting prior to starting this guide, modifying the following string, with your relevant username should work: 1 2 3 4 ; C : \\ Users \\ ldeer \\ AppData \\ Local \\ atom \\ bin ; C : \\ Program Files \\ Git \\ bin ; C : \\ Program Files \\ R \\ R - 3 . X . X \\ bin ; Mac Users (Slight Modifications for Linux Users) You will need to add a line to the file \".bash_profile\" or potentially create the file if it didn't already exist. This file lives in your home directory and it is hidden from your view by default. We now provide a guide of how to create / adjust this file using a tiny editor called nano, if you are familiar with editing text files, just use your editor of choice. Open a Terminal and type: 1 nano ~/ . bash_profile If .bash_profile already existed, you will see some text at this point. If so, use the arrow keys to scroll all the way to the bottom of the file. Add the following line at the end of the file: 1 export PATH=\" ${ PATH } :/path/to/program/inside/package\" for each program we need to make accessible. For example to make matlab accessible from the command line: 1 export PATH=\" ${ PATH } :/Applications/MATLAB_R2016a.app/bin/matlab Please do this for the following software: Sublime Text Git Matlab R Once you have finished, press Return and then ctrl+o (= WriteOut = save) and Return once more. Your default locale settings may conflict with some of the programs we'll need. If you want to be on the safe side, add these lines to your .bash_profile file: 1 2 export LC_ALL = en_US . UTF - 8 export LANG = en_US . UTF - 8 Thanks for Hans-Martin von Gaudecker, and in turn Matthias Bannert for the tip on locale settings. Linux users : For most distributions, everything here applies to the file .bashrc instead of .bash_profile. The End Well done - it's time for a beer, or some other cold beverage to celebrate completing this guide.","title":"Making Path Settings Permanent"},{"location":"path-setting/#making-path-settings-permanent","text":"For our workflow be be command line driven, we need to be able to call software from the command line. Whilst much of the software we have installed as automatically made this possible, it is not universally the case. Here we will make the extra few changes we need to complete the installation guide.","title":"Making Path Settings Permanent"},{"location":"path-setting/#windows-users-for-windows-8-and-10","text":"You will need local administration rights for your computer, but you should have these on your personal computers or ones owned by the Department. Right-click on Computer. Then go to \"Properties\" and select the tab \"Advanced System settings\". Choose \"Environment Variables\" and select \"Path\" from the list of system variables. Choose \u201cEdit\u201d and append (i.e., do not overwrite the previous value): 1 ; C : \\ Path \\ to \\ program . exe to the variable value \u2013 make sure the rest remains as it is and do not include spaces between the \";\" and the text. Click on OK as often as needed. If you accepted all defaults during your installation, and didn't have any other non-default setting prior to starting this guide, modifying the following string, with your relevant username should work: 1 2 3 4 ; C : \\ Users \\ ldeer \\ AppData \\ Local \\ atom \\ bin ; C : \\ Program Files \\ Git \\ bin ; C : \\ Program Files \\ R \\ R - 3 . X . X \\ bin ;","title":"Windows Users (for Windows 8 and 10)"},{"location":"path-setting/#mac-users-slight-modifications-for-linux-users","text":"You will need to add a line to the file \".bash_profile\" or potentially create the file if it didn't already exist. This file lives in your home directory and it is hidden from your view by default. We now provide a guide of how to create / adjust this file using a tiny editor called nano, if you are familiar with editing text files, just use your editor of choice. Open a Terminal and type: 1 nano ~/ . bash_profile If .bash_profile already existed, you will see some text at this point. If so, use the arrow keys to scroll all the way to the bottom of the file. Add the following line at the end of the file: 1 export PATH=\" ${ PATH } :/path/to/program/inside/package\" for each program we need to make accessible. For example to make matlab accessible from the command line: 1 export PATH=\" ${ PATH } :/Applications/MATLAB_R2016a.app/bin/matlab Please do this for the following software: Sublime Text Git Matlab R Once you have finished, press Return and then ctrl+o (= WriteOut = save) and Return once more. Your default locale settings may conflict with some of the programs we'll need. If you want to be on the safe side, add these lines to your .bash_profile file: 1 2 export LC_ALL = en_US . UTF - 8 export LANG = en_US . UTF - 8 Thanks for Hans-Martin von Gaudecker, and in turn Matthias Bannert for the tip on locale settings. Linux users : For most distributions, everything here applies to the file .bashrc instead of .bash_profile.","title":"Mac Users (Slight Modifications for Linux Users)"},{"location":"path-setting/#the-end","text":"Well done - it's time for a beer, or some other cold beverage to celebrate completing this guide.","title":"The End"},{"location":"python-more/","text":"Additional Python packages Anaconda's Python Distribution comes with many of the packages we need to do scientific computing. If you're interested in all the packages included, click here and go to the Python 3.6 tab. However, you may come across packages that are not installed by default. In this case we recommend you use the pip package management tool to install them. The following recipe works for all operating systems. First let us update pip by typing the following into the terminal 1 pip install --upgrade pip If you get an error, try typing instead: 1 python -m pip install --upgrade pip For this course, we will need the package Selenium as part of the web scraping tool kit we will build up. First let us install a dependency for it via 1 pip install msgpack We then install selenium by entering the following into a terminal: 1 pip install selenium pip will then go through and install the package we asked for, and any other dependencies. If this succeeded, the last line it printed out should be: 1 Successfully installed selenium-3.14.0 More packages Please also install the following packages: linearmodels virtualenvwrapper","title":"Python Extras"},{"location":"python-more/#additional-python-packages","text":"Anaconda's Python Distribution comes with many of the packages we need to do scientific computing. If you're interested in all the packages included, click here and go to the Python 3.6 tab. However, you may come across packages that are not installed by default. In this case we recommend you use the pip package management tool to install them. The following recipe works for all operating systems. First let us update pip by typing the following into the terminal 1 pip install --upgrade pip If you get an error, try typing instead: 1 python -m pip install --upgrade pip For this course, we will need the package Selenium as part of the web scraping tool kit we will build up. First let us install a dependency for it via 1 pip install msgpack We then install selenium by entering the following into a terminal: 1 pip install selenium pip will then go through and install the package we asked for, and any other dependencies. If this succeeded, the last line it printed out should be: 1 Successfully installed selenium-3.14.0","title":"Additional Python packages"},{"location":"python-more/#more-packages","text":"Please also install the following packages: linearmodels virtualenvwrapper","title":"More packages"},{"location":"python/","text":"Anaconda Python Anaconda is a pre-packaged Python distribution for scientific users. Unlike other Python distributions, this means that most additional functionality that we need to do numerical computing, statistics, plotting and the like come already installed - which saves us a lot of time. Installing Anaconda Python for Mac Install using Homebrew. In your terminal type the following and press return: 1 brew cask install anaconda During the installation process you might be the following output asking you to review the license agreement: 1 2 3 4 5 6 7 8 Welcome to Anaconda3 In order to continue the installation process, please review the license agreement. Please, press ENTER to continue >>> ... Do you approve the license terms? [ yes | no ] Press Return until you reach the end, and type 'yes'. Making Anaconda Python Accessible from the Terminal By default, Mac uses a default install of Python inside the terminal. We want to change that. Enter the following in the terminal and press Return : 1 export PATH = \"/usr/local/anaconda3/bin: $PATH \" Then, reload the terminal environment: 1 source .bash_profile Now proceed to verify your install Installing Anaconda Python for Linux and Windows First, we need to download the Anaconda Bash Script (a file that will install things for us). Enter the following into the terminal: 1 curl -O https://repo.anaconda.com/archive/Anaconda3-2019.10-Linux-x86_64.sh Run the Anaconda Script by entering the following into the terminal: 1 bash Anaconda3-2019.10-Linux-x86_64.sh As this script runs through, review and accept the license agreement. To do this press Return until you reach the end, and type 'yes'. After you agree to the license, you will be prompted to choose the location of the installation: 1 2 3 4 5 6 7 8 Anaconda3 will now be installed into this location: /home/lachlan/anaconda3 - Press ENTER to confirm the location - Press CTRL-C to abort the installation - Or specify a different location below [ /home/lachlan/anaconda3 ] >>> Use the default. The installation will continue - it does take some time, so be patient. Once the installation is complete, you will get the following output: 1 2 3 4 5 ... installation finished. Do you wish the installer to prepend the Anaconda3 install location to PATH in your /home/lachlan/.bashrc ? [ yes | no ] >>> Type 'yes'. Now we need to refresh our terminal settings, so type the following and press return: 1 source ~/.bashrc Now proceed to verify your install . Updating the Anaconda Install In the future, if you want to find the most up to date Anaconda installer, go to the following website: https://repo.anaconda.com/archive/ and find the most recent Anaconda3 installer for Linux-x86_64 Verify Installation To verify that the correct version of Python has been installed, usually we would follow the programName --version logic from before: 1 python --version which yields: 1 Python 3 .7.4 which tells us that Python is installed. But, because most operating systems these days have some version of Python installed, this doesn't guarantee that the Anaconda version is available for us to use from the terminal. To check, initiate Python by entering the following into a terminal and pressing Return : 1 python You should now see something like: 1 2 3 Python 3 .7.4 ( default, Aug 13 2019 , 20 :35:49 ) [ GCC 7 .3.0 ] :: Anaconda, Inc. on linux Type \"help\" , \"copyright\" , \"credits\" or \"license\" for more information. where the operating system name should be different for Mac users. Now we see that the terminal is using the Anaconda version as we wanted. To quit the Python session we just opened, type the following at the >>> : 1 >>> quit () and you will return to your terminal. This was successful if you now see a $ rather than the >>> . Python 2 vs Python 3 Python 2 and 3 are incompatible in syntax. If you had Python 2 previously installed on your machine, you might have seen Python 2.x.x above. In that case try typing python3 --version instead. Now you should see a message like the one above and are good to go for the course.","title":"Python"},{"location":"python/#anaconda-python","text":"Anaconda is a pre-packaged Python distribution for scientific users. Unlike other Python distributions, this means that most additional functionality that we need to do numerical computing, statistics, plotting and the like come already installed - which saves us a lot of time.","title":"Anaconda Python"},{"location":"python/#installing-anaconda-python-for-mac","text":"Install using Homebrew. In your terminal type the following and press return: 1 brew cask install anaconda During the installation process you might be the following output asking you to review the license agreement: 1 2 3 4 5 6 7 8 Welcome to Anaconda3 In order to continue the installation process, please review the license agreement. Please, press ENTER to continue >>> ... Do you approve the license terms? [ yes | no ] Press Return until you reach the end, and type 'yes'.","title":"Installing Anaconda Python for Mac"},{"location":"python/#making-anaconda-python-accessible-from-the-terminal","text":"By default, Mac uses a default install of Python inside the terminal. We want to change that. Enter the following in the terminal and press Return : 1 export PATH = \"/usr/local/anaconda3/bin: $PATH \" Then, reload the terminal environment: 1 source .bash_profile Now proceed to verify your install","title":"Making Anaconda Python Accessible from the Terminal"},{"location":"python/#installing-anaconda-python-for-linux-and-windows","text":"First, we need to download the Anaconda Bash Script (a file that will install things for us). Enter the following into the terminal: 1 curl -O https://repo.anaconda.com/archive/Anaconda3-2019.10-Linux-x86_64.sh Run the Anaconda Script by entering the following into the terminal: 1 bash Anaconda3-2019.10-Linux-x86_64.sh As this script runs through, review and accept the license agreement. To do this press Return until you reach the end, and type 'yes'. After you agree to the license, you will be prompted to choose the location of the installation: 1 2 3 4 5 6 7 8 Anaconda3 will now be installed into this location: /home/lachlan/anaconda3 - Press ENTER to confirm the location - Press CTRL-C to abort the installation - Or specify a different location below [ /home/lachlan/anaconda3 ] >>> Use the default. The installation will continue - it does take some time, so be patient. Once the installation is complete, you will get the following output: 1 2 3 4 5 ... installation finished. Do you wish the installer to prepend the Anaconda3 install location to PATH in your /home/lachlan/.bashrc ? [ yes | no ] >>> Type 'yes'. Now we need to refresh our terminal settings, so type the following and press return: 1 source ~/.bashrc Now proceed to verify your install . Updating the Anaconda Install In the future, if you want to find the most up to date Anaconda installer, go to the following website: https://repo.anaconda.com/archive/ and find the most recent Anaconda3 installer for Linux-x86_64","title":"Installing Anaconda Python for Linux and Windows"},{"location":"python/#verify-installation","text":"To verify that the correct version of Python has been installed, usually we would follow the programName --version logic from before: 1 python --version which yields: 1 Python 3 .7.4 which tells us that Python is installed. But, because most operating systems these days have some version of Python installed, this doesn't guarantee that the Anaconda version is available for us to use from the terminal. To check, initiate Python by entering the following into a terminal and pressing Return : 1 python You should now see something like: 1 2 3 Python 3 .7.4 ( default, Aug 13 2019 , 20 :35:49 ) [ GCC 7 .3.0 ] :: Anaconda, Inc. on linux Type \"help\" , \"copyright\" , \"credits\" or \"license\" for more information. where the operating system name should be different for Mac users. Now we see that the terminal is using the Anaconda version as we wanted. To quit the Python session we just opened, type the following at the >>> : 1 >>> quit () and you will return to your terminal. This was successful if you now see a $ rather than the >>> . Python 2 vs Python 3 Python 2 and 3 are incompatible in syntax. If you had Python 2 previously installed on your machine, you might have seen Python 2.x.x above. In that case try typing python3 --version instead. Now you should see a message like the one above and are good to go for the course.","title":"Verify Installation"},{"location":"r-packages/","text":"Additional R Packages We will need some additional libraries to conduct our statistical analysis. All Users Proceed as follows: Open RStudio In the console , copy and paste the following: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 to_install <- c ( \"reshape\" , \"rmarkdown\" , \"plm\" , \"Hmisc\" , \"sandwich\" , \"Ecdat\" , \"stargazer\" , \"knitr\" , \"httr\" , \"rvest\" , \"xml2\" , \"xtable\" , \"tidyverse\" , \"AER\" , \"rdd\" , \"car\" , \"aod\" , \"lmtest\" , \"lfe\" , \"nlme\" , \"lme4\" , \"erer\" , \"margins\" , \"multiwayvcov\" \"lubridate\" , \"haven\" , \"rddensity\" , \"rdrobust\" , \"ivpack\" , \"readxl\" , \"ggrepel\" , \"multiwayvcov\" , \"RSQLite\" , \"dbplyr\" , \"devtools\" , \"rticles\" , \"here\" , \"optparse\" , \"rlist\" ) install.packages ( to_install ) If you are asked if you want to install packages that need compilation, type y followed by Return to confirm this. Wait until all the packages have been installed and the you are done. It may take a while, so be patient Note that many dependencies get installed along the way. We also want some packages to be installed from Github - these typically still under development: 1 2 3 4 5 6 7 8 from_gh <- c ( \"ddsjoberg/gtsummary\" , \"vincentarelbundock/modelsummary\" , \"rstudio/fontawesome\" , \"rstudio/gt\" , \"rstudio/renv\" ) devtools :: install_github ( from_gh )","title":"R Packages"},{"location":"r-packages/#additional-r-packages","text":"We will need some additional libraries to conduct our statistical analysis.","title":"Additional R Packages"},{"location":"r-packages/#all-users","text":"Proceed as follows: Open RStudio In the console , copy and paste the following: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 to_install <- c ( \"reshape\" , \"rmarkdown\" , \"plm\" , \"Hmisc\" , \"sandwich\" , \"Ecdat\" , \"stargazer\" , \"knitr\" , \"httr\" , \"rvest\" , \"xml2\" , \"xtable\" , \"tidyverse\" , \"AER\" , \"rdd\" , \"car\" , \"aod\" , \"lmtest\" , \"lfe\" , \"nlme\" , \"lme4\" , \"erer\" , \"margins\" , \"multiwayvcov\" \"lubridate\" , \"haven\" , \"rddensity\" , \"rdrobust\" , \"ivpack\" , \"readxl\" , \"ggrepel\" , \"multiwayvcov\" , \"RSQLite\" , \"dbplyr\" , \"devtools\" , \"rticles\" , \"here\" , \"optparse\" , \"rlist\" ) install.packages ( to_install ) If you are asked if you want to install packages that need compilation, type y followed by Return to confirm this. Wait until all the packages have been installed and the you are done. It may take a while, so be patient Note that many dependencies get installed along the way. We also want some packages to be installed from Github - these typically still under development: 1 2 3 4 5 6 7 8 from_gh <- c ( \"ddsjoberg/gtsummary\" , \"vincentarelbundock/modelsummary\" , \"rstudio/fontawesome\" , \"rstudio/gt\" , \"rstudio/renv\" ) devtools :: install_github ( from_gh )","title":"All Users"},{"location":"r/","text":"R R is a language for statistical computing and graphics. R's use in the data science and econometrics community has taken off over recent years and (at a bare minimum) should be considered as an open source replacement to Stata. Installing R for Mac Users Go to the R homepage and download the installer for your operating system. The current version for Mac and Windows is R version 3.6.2 . Once you have installed R, verify your install . Why Not Install via Homebrew? There is conflicting views on Homebrew's installation of R . Because we haven't tried it to ensure no problems will emerge, we recommend going with the installation based on the CRAN distributed package. Installing R for Linux & Windows Users First, we need to add a repository so that our operating system knows where to install the most recent version of R from. Enter the following into the terminal and press Return : 1 sudo add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/' Now, update to get the package manifests from the new repository: 1 sudo apt-get update Note: if you are using a different version of Linux or Ubuntu - i.e. not Ubuntu 18.04 LTS, check out this site to correctly modify the entry above. We can now install R as from the terminal by entering the following: 1 sudo apt-get install r-base r-base-dev Install the multi-threaded OpenBlas library to get higher performance for linear algebra operations: 1 sudo apt-get install libopenblas-base Now, verify your install . R on WSL Ubuntu vs. R on native Windows Even if you already have a version of R installed on your Windows machine, you need to install R inside the WSL Ubuntu 18.04 environment we have set up. Your Ubuntu terminal cannot see everything you have on your native Windows installation. Verifying your Install of R - All Users Open a terminal and enter: 1 R --version followed by pressing Return . The expected return begins with: 1 R version 3 .6.x ( 2019 -xx-xx ) -- \"Some Funky Name\"","title":"R"},{"location":"r/#r","text":"R is a language for statistical computing and graphics. R's use in the data science and econometrics community has taken off over recent years and (at a bare minimum) should be considered as an open source replacement to Stata.","title":"R"},{"location":"r/#installing-r-for-mac-users","text":"Go to the R homepage and download the installer for your operating system. The current version for Mac and Windows is R version 3.6.2 . Once you have installed R, verify your install . Why Not Install via Homebrew? There is conflicting views on Homebrew's installation of R . Because we haven't tried it to ensure no problems will emerge, we recommend going with the installation based on the CRAN distributed package.","title":"Installing R for Mac Users"},{"location":"r/#installing-r-for-linux-windows-users","text":"First, we need to add a repository so that our operating system knows where to install the most recent version of R from. Enter the following into the terminal and press Return : 1 sudo add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/' Now, update to get the package manifests from the new repository: 1 sudo apt-get update Note: if you are using a different version of Linux or Ubuntu - i.e. not Ubuntu 18.04 LTS, check out this site to correctly modify the entry above. We can now install R as from the terminal by entering the following: 1 sudo apt-get install r-base r-base-dev Install the multi-threaded OpenBlas library to get higher performance for linear algebra operations: 1 sudo apt-get install libopenblas-base Now, verify your install . R on WSL Ubuntu vs. R on native Windows Even if you already have a version of R installed on your Windows machine, you need to install R inside the WSL Ubuntu 18.04 environment we have set up. Your Ubuntu terminal cannot see everything you have on your native Windows installation.","title":"Installing R for Linux &amp; Windows Users"},{"location":"r/#verifying-your-install-of-r-all-users","text":"Open a terminal and enter: 1 R --version followed by pressing Return . The expected return begins with: 1 R version 3 .6.x ( 2019 -xx-xx ) -- \"Some Funky Name\"","title":"Verifying your Install of R - All Users"},{"location":"rstudio/","text":"RStudio RStudio provides an easy to work with graphical interface to R, and its format should feel familiar to Stata and Matlab users. Installing RStudio for Mac Users We can install RStudio with Homebrew: 1 brew cask install rstudio To see if it installed correctly, try and open RStudio from spotlight - there's not simple verification from the terminal. Installing RStudio for Linux Users Download the Latest Version of RStudio: 1 wget https://download1.rstudio.org/desktop/bionic/amd64/rstudio-1.2.5033-amd64.deb Install it: 1 sudo gdebi rstudio-1.2.5033-amd64.deb To see if it installed correctly, try and open RStudio from the GNOME menu - there's not simple verification from the terminal. Installing RStudio for Windows Users Using RStudio together with the R that we installed into our WSL Ubuntu setup is a little trickier - because we don't have access to a graphical interface. The trick will be to install the server version of RStudio. It may sound slightly daunting - but it is actually quite easy! First, we download the most recent version of RStudio Server for Ubuntu 18 (see here ). Enter the following into your terminal and press Return : 1 wget https://download2.rstudio.org/server/bionic/amd64/rstudio-server-1.2.5033-amd64.deb Now install it by entering this command and hitting Return : 1 sudo gdebi rstudio-server-1.2.5033-amd64.deb Now that we have RStudio installed on our subsystem, how can we use it? In the Ubuntu terminal enter the following text and press Return : 1 sudo rstudio-server start Now open a web browser, and go to the following address: 1 http://localhost:8787/ which will take you to a log in page. Log in using the username and password for your Ubuntu terminal that we set up at the beginning. After logging in successfully you have access to the RStudio that you installed in your Ubuntu subsystem. To log out, click on the log out button in the top right corner. To stop the RStudio server from running (logging out doesn't stop it), enter rstudio stop into your terminal.","title":"RStudio"},{"location":"rstudio/#rstudio","text":"RStudio provides an easy to work with graphical interface to R, and its format should feel familiar to Stata and Matlab users.","title":"RStudio"},{"location":"rstudio/#installing-rstudio-for-mac-users","text":"We can install RStudio with Homebrew: 1 brew cask install rstudio To see if it installed correctly, try and open RStudio from spotlight - there's not simple verification from the terminal.","title":"Installing RStudio for Mac Users"},{"location":"rstudio/#installing-rstudio-for-linux-users","text":"Download the Latest Version of RStudio: 1 wget https://download1.rstudio.org/desktop/bionic/amd64/rstudio-1.2.5033-amd64.deb Install it: 1 sudo gdebi rstudio-1.2.5033-amd64.deb To see if it installed correctly, try and open RStudio from the GNOME menu - there's not simple verification from the terminal.","title":"Installing RStudio for Linux Users"},{"location":"rstudio/#installing-rstudio-for-windows-users","text":"Using RStudio together with the R that we installed into our WSL Ubuntu setup is a little trickier - because we don't have access to a graphical interface. The trick will be to install the server version of RStudio. It may sound slightly daunting - but it is actually quite easy! First, we download the most recent version of RStudio Server for Ubuntu 18 (see here ). Enter the following into your terminal and press Return : 1 wget https://download2.rstudio.org/server/bionic/amd64/rstudio-server-1.2.5033-amd64.deb Now install it by entering this command and hitting Return : 1 sudo gdebi rstudio-server-1.2.5033-amd64.deb Now that we have RStudio installed on our subsystem, how can we use it? In the Ubuntu terminal enter the following text and press Return : 1 sudo rstudio-server start Now open a web browser, and go to the following address: 1 http://localhost:8787/ which will take you to a log in page. Log in using the username and password for your Ubuntu terminal that we set up at the beginning. After logging in successfully you have access to the RStudio that you installed in your Ubuntu subsystem. To log out, click on the log out button in the top right corner. To stop the RStudio server from running (logging out doesn't stop it), enter rstudio stop into your terminal.","title":"Installing RStudio for Windows Users"},{"location":"snakemake/","text":"Snakemake Snakemake is an easy to use workflow management system. It will allow us to control the execution of a set scripts by by running them from the command line. We will use make to automate the execution of our research projects with a \"single click\" so that our entire work flow is reproducible. Why a Tool to Manage Project's Execution? We strongly believe in using build tools to manage the execution of a research project - and we hope that by the end of the course you do too. Some reasons we push this topic are: Your workflow / order of execution is explicitly documented. Each time you run Snakemake, it only executes each script if the output is expected to be different from the last time your ran it. That is, it runs 'partial builds.' Its written in Python, which minimizes the learning curve needed to pick up the essentials relatively small It was designed for academic/professional research (in Bioinformatics) so it feels more intuitive than most alternatives for our desired audience. Snakemake is a python package - so we can install using the default python installer, pip. All Users In a terminal window enter the command: 1 pip install snakemake followed by pressing the Return key. Verify that your installation worked correctly by entering 1 snakemake --version into a terminal and pressing Return. The expected output is the current version on the software, which should be greater than 1 5 .9.1","title":"Automation with Snakemake"},{"location":"snakemake/#snakemake","text":"Snakemake is an easy to use workflow management system. It will allow us to control the execution of a set scripts by by running them from the command line. We will use make to automate the execution of our research projects with a \"single click\" so that our entire work flow is reproducible. Why a Tool to Manage Project's Execution? We strongly believe in using build tools to manage the execution of a research project - and we hope that by the end of the course you do too. Some reasons we push this topic are: Your workflow / order of execution is explicitly documented. Each time you run Snakemake, it only executes each script if the output is expected to be different from the last time your ran it. That is, it runs 'partial builds.' Its written in Python, which minimizes the learning curve needed to pick up the essentials relatively small It was designed for academic/professional research (in Bioinformatics) so it feels more intuitive than most alternatives for our desired audience. Snakemake is a python package - so we can install using the default python installer, pip.","title":"Snakemake"},{"location":"snakemake/#all-users","text":"In a terminal window enter the command: 1 pip install snakemake followed by pressing the Return key. Verify that your installation worked correctly by entering 1 snakemake --version into a terminal and pressing Return. The expected output is the current version on the software, which should be greater than 1 5 .9.1","title":"All Users"},{"location":"textEditor/","text":"Motivation A good text editor lies at the heart of any serious programmer's toolkit: It can do almost anything and makes you much more productive. The editors built into a specific program are generally are not a satisfying option (we will find certain cases where you may want to use them). There is a slight learning curve, but soon you hopefully be wondering why no-one forced you to do this before! We should get you past the steepest part of the learning curve during the course itself, so we don't anticipate you struggling on your own. Note None of the skills we learn in the course are tied to VS Code, so if you do decide to move away to another editor, nothing will be lost. VS Code VS Code is a relatively new text editor that works across all three platforms: Linux, Windows and Mac. In a short time it has already become one of most used text editors and we hope you will soon see why. It is built by Microsoft, but is open source, i.e. everyone can see and modify the program's internal code - so it is less nasty on the conscious than some of Microsoft's traditional products. The main advantages for us are that it includes support for debugging, embedded Git control and GitHub, syntax highlighting, intelligent code completion, and many useful plugins - all of which make our lives much easier. Installing VS Code on Mac VS Code can be installed using homebrew. Type the following into your terminal and hit return: 1 brew cask install visual-studio-code Once it has been installed, verify your install by following the instructions below . Installing VS Code on Ubuntu VS Code is available to install via snap. Enter the following in your terminal and press Return : 1 snap install code --classic Once it has been installed, verify your install by following the instructions below . Installing VS Code on Windows Go to the VS Code download page , and download the User Installer for Windows. Once downloaded double click to install. Accept any default options. At the end of the install, launch VS Code (it gives you this option on the last window). The first time you launch VS code, you will see the following: Where it prompts you to install the 'Remote WSL' extension, choose 'Install'. Once complete, in your Ubuntu terminal type code and press Return . You should see the following (what appears after code . ) below: When the unpacking is complete, VS Code should open. Windows Defender Firewall You will likely get the following pop-up during the above process: Click 'Allow access' if you do. Verifying Your Install After you have installed software via the terminal, we often want to verify the install was successful. For most programs we do this by typing the program name followed by --version in to the terminal. Let's do it: 1 code --version which should yield output like: 1 2 3 1 . 41 . 1 26076 a4de974ead31f97692a0d32f90d735645c0 x64 if successful. Installing Extensions for VS Code VS Code is great straight of the box, but gets even better when we add some additional extensions to make our life easier. To add extensions: Open VS Code Press Ctrl + Shift + X to open the Extensions side bar (it opens on the left). Add extensions by: Searching for them in the Marketplace When you find them, click Install We recommend the following extensions to be added for this course: Bracket Pair Colorizer 2 Code Spell Checker Git History LaTeX Workshop Markdown All in One Markdown Preview Enhanced Project Manager Python R vscode-icons vscode-pdf Whitespacer","title":"Text Editor"},{"location":"textEditor/#motivation","text":"A good text editor lies at the heart of any serious programmer's toolkit: It can do almost anything and makes you much more productive. The editors built into a specific program are generally are not a satisfying option (we will find certain cases where you may want to use them). There is a slight learning curve, but soon you hopefully be wondering why no-one forced you to do this before! We should get you past the steepest part of the learning curve during the course itself, so we don't anticipate you struggling on your own. Note None of the skills we learn in the course are tied to VS Code, so if you do decide to move away to another editor, nothing will be lost.","title":"Motivation"},{"location":"textEditor/#vs-code","text":"VS Code is a relatively new text editor that works across all three platforms: Linux, Windows and Mac. In a short time it has already become one of most used text editors and we hope you will soon see why. It is built by Microsoft, but is open source, i.e. everyone can see and modify the program's internal code - so it is less nasty on the conscious than some of Microsoft's traditional products. The main advantages for us are that it includes support for debugging, embedded Git control and GitHub, syntax highlighting, intelligent code completion, and many useful plugins - all of which make our lives much easier.","title":"VS Code"},{"location":"textEditor/#installing-vs-code-on-mac","text":"VS Code can be installed using homebrew. Type the following into your terminal and hit return: 1 brew cask install visual-studio-code Once it has been installed, verify your install by following the instructions below .","title":"Installing VS Code on Mac"},{"location":"textEditor/#installing-vs-code-on-ubuntu","text":"VS Code is available to install via snap. Enter the following in your terminal and press Return : 1 snap install code --classic Once it has been installed, verify your install by following the instructions below .","title":"Installing VS Code on Ubuntu"},{"location":"textEditor/#installing-vs-code-on-windows","text":"Go to the VS Code download page , and download the User Installer for Windows. Once downloaded double click to install. Accept any default options. At the end of the install, launch VS Code (it gives you this option on the last window). The first time you launch VS code, you will see the following: Where it prompts you to install the 'Remote WSL' extension, choose 'Install'. Once complete, in your Ubuntu terminal type code and press Return . You should see the following (what appears after code . ) below: When the unpacking is complete, VS Code should open. Windows Defender Firewall You will likely get the following pop-up during the above process: Click 'Allow access' if you do.","title":"Installing VS Code on Windows"},{"location":"textEditor/#verifying-your-install","text":"After you have installed software via the terminal, we often want to verify the install was successful. For most programs we do this by typing the program name followed by --version in to the terminal. Let's do it: 1 code --version which should yield output like: 1 2 3 1 . 41 . 1 26076 a4de974ead31f97692a0d32f90d735645c0 x64 if successful.","title":"Verifying Your Install"},{"location":"textEditor/#installing-extensions-for-vs-code","text":"VS Code is great straight of the box, but gets even better when we add some additional extensions to make our life easier. To add extensions: Open VS Code Press Ctrl + Shift + X to open the Extensions side bar (it opens on the left). Add extensions by: Searching for them in the Marketplace When you find them, click Install We recommend the following extensions to be added for this course: Bracket Pair Colorizer 2 Code Spell Checker Git History LaTeX Workshop Markdown All in One Markdown Preview Enhanced Project Manager Python R vscode-icons vscode-pdf Whitespacer","title":"Installing Extensions for VS Code"},{"location":"webscraping_drivers/","text":"Web Scraping Using an Automated Browser Sometimes when we scrape the web, we need to automate our computer to open a web browser to gather information from each page. This is especially true when the site we want to scrape has content that is loaded dynamically with javascript. We will install one package to help us here: Chromedriver Installing this stuff is operating system specific, hence so are the instructions below. Mac Users Google Chrome We need an up to date version of the web browser Google Chrome. We will install it via Homebrew. Enter the following into the terminal and hit Return : 1 brew cask install google-chrome Verify the install: 1 google-chrome --version which should yield output similar to: 1 Google Chrome 79 .0.3945.117 Chromedriver Now we install some software than can control a Google Chrome browser. It is called Chromedriver. Again, install via Homebrew: 1 brew cask install chromedriver Verify your install. 1 chromedriver --version The expected output is ChromeDriver 79.0.3945.36 .... . It is important that the version numbers (i.e the '79' part) match between Google Chrome and Chromedriver. Linux & Windows Users Google Chrome We need an up to date version of Google Chrome and some additional linux packages. First add the additional linux packages by entering the following into the terminal: 1 sudo apt-get install libxss1 libappindicator1 libindicator7 Now let's download the latest stable version of Google Chrome using the terminal: 1 wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb And now install it: 1 2 sudo dpkg -i google-chrome*.deb sudo apt-get install -f Verify the install: 1 google-chrome --version which should yield output similar to: 1 Google Chrome 79 .0.3945.117 Chromedriver Install xvfb by pasting the following into a terminal and then pressing Return : 1 sudo apt-get install xvfb This will allow Chrome to run 'headless' - i.e. without popping up a browser. Install Chromedriver by pasting the following and then pressing Return : 1 2 3 4 5 6 7 8 9 sudo apt-get install unzip wget -N https://chromedriver.storage.googleapis.com/2.41/chromedriver_linux64.zip unzip chromedriver_linux64.zip chmod +x chromedriver sudo mv -f chromedriver /usr/local/share/chromedriver sudo ln -s /usr/local/share/chromedriver /usr/local/bin/chromedriver sudo ln -s /usr/local/share/chromedriver /usr/bin/chromedriver Now verify the installation was successful: 1 chromedriver --version The expected output is ChromeDriver 79.0.3945.36 .... . It is important that the version numbers (i.e the '79' part) match between Google Chrome and Chromedriver. Hat-tip We borrowed quite liberally from Christopher Su to for instructions on installing Chrome and Chromedriver .","title":"Webscraping"},{"location":"webscraping_drivers/#web-scraping-using-an-automated-browser","text":"Sometimes when we scrape the web, we need to automate our computer to open a web browser to gather information from each page. This is especially true when the site we want to scrape has content that is loaded dynamically with javascript. We will install one package to help us here: Chromedriver Installing this stuff is operating system specific, hence so are the instructions below.","title":"Web Scraping Using an Automated Browser"},{"location":"webscraping_drivers/#mac-users","text":"","title":"Mac Users"},{"location":"webscraping_drivers/#google-chrome","text":"We need an up to date version of the web browser Google Chrome. We will install it via Homebrew. Enter the following into the terminal and hit Return : 1 brew cask install google-chrome Verify the install: 1 google-chrome --version which should yield output similar to: 1 Google Chrome 79 .0.3945.117","title":"Google Chrome"},{"location":"webscraping_drivers/#chromedriver","text":"Now we install some software than can control a Google Chrome browser. It is called Chromedriver. Again, install via Homebrew: 1 brew cask install chromedriver Verify your install. 1 chromedriver --version The expected output is ChromeDriver 79.0.3945.36 .... . It is important that the version numbers (i.e the '79' part) match between Google Chrome and Chromedriver.","title":"Chromedriver"},{"location":"webscraping_drivers/#linux-windows-users","text":"","title":"Linux &amp; Windows Users"},{"location":"webscraping_drivers/#google-chrome_1","text":"We need an up to date version of Google Chrome and some additional linux packages. First add the additional linux packages by entering the following into the terminal: 1 sudo apt-get install libxss1 libappindicator1 libindicator7 Now let's download the latest stable version of Google Chrome using the terminal: 1 wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb And now install it: 1 2 sudo dpkg -i google-chrome*.deb sudo apt-get install -f Verify the install: 1 google-chrome --version which should yield output similar to: 1 Google Chrome 79 .0.3945.117","title":"Google Chrome"},{"location":"webscraping_drivers/#chromedriver_1","text":"Install xvfb by pasting the following into a terminal and then pressing Return : 1 sudo apt-get install xvfb This will allow Chrome to run 'headless' - i.e. without popping up a browser. Install Chromedriver by pasting the following and then pressing Return : 1 2 3 4 5 6 7 8 9 sudo apt-get install unzip wget -N https://chromedriver.storage.googleapis.com/2.41/chromedriver_linux64.zip unzip chromedriver_linux64.zip chmod +x chromedriver sudo mv -f chromedriver /usr/local/share/chromedriver sudo ln -s /usr/local/share/chromedriver /usr/local/bin/chromedriver sudo ln -s /usr/local/share/chromedriver /usr/bin/chromedriver Now verify the installation was successful: 1 chromedriver --version The expected output is ChromeDriver 79.0.3945.36 .... . It is important that the version numbers (i.e the '79' part) match between Google Chrome and Chromedriver. Hat-tip We borrowed quite liberally from Christopher Su to for instructions on installing Chrome and Chromedriver .","title":"Chromedriver"},{"location":"windows-wsl/","text":"Windows Subsystem For Linux Windows Users Only! This page is only for those who are using Windows. Those with Mac or Linux operating systems can proceed to 'Command Line Tools.' Windows Subsystem for Linux (WSL) is a feature in Windows 10 that enables you to use Linux command-line tools on your Windows system. By installing this feature, everyone in the course will be able to run the same commands, and get the same output - an essential aspect of reproducibility. We hope that you will continue to use the WSL features we introduce to you over the next three weeks after the course is over for your own research related computing. The process for installing everything we need here is quite order dependent - follow the steps in the order they appear below. Want More Information? For more information about the Windows Subsystem for Linux, look here . Up to Date Windows 10 Required! To go further with this Installation Guide you need to have an up to date installation of Windows 10. IT Services in the Econ Department have assured us, if you update Windows to the latest version in your UZH laptop everything that follows will work. If you do not have a Windows 10 machine. Contact us! Install the Windows Subsystem for Linux As a first step we need to install the Windows Linux Subsystem. Proceed as follows: Open 'Settings' by searching for it in the search bar In Setting, search for 'Apps & features' Scroll down and click on 'Programs and Features' On the left, click on 'Turn Windows features on or off' Scroll down until you see 'Windows Subsystem for Linux' and click the box, and then click 'OK' A prompt to restart your PC will appear, click 'Restart now' to restart your PC. Installing a Linux Distribution We are going to install 'Ubuntu' as our Linux distribution of choice. It is one of the more user friendly choices around. Once your PC has rebooted, proceed as follows: Open the Microsoft Store by searching for it in the search bar Search for 'Ubuntu' in the Store search bar and press enter Select 'Ubuntu 18.04 LTS' from the choices returned by clicking on it Click 'Get' to install Once installed, if you open the Windows Menu, you will See 'Ubuntu 18.04 LTS' under 'Recently Added' Click on 'Ubuntu 18.04 LTS.' A black terminal will open, and inform you it is installing Once installed, it will prompt you to create an account. Enter a username And a password (Note: as you enter a password nothing will appear) Re-enter the password as instructed The installation will now have completed WSL Not Enabled Errors WSL not enabled If at Step 6, you see the following: This means you have not successfully installed the Windows Subsystem for Linux, or you did not restart your machine as instructed. Try to either: Restart your PC Return here and redo the process. Installing Windows Terminal The terminal that comes with Ubuntu 18.04 LTS out of the box is not our favorite, so we will install something a little better. Proceed as follows: (You should be more comfortable installing stuff from the store now, so we will skip the screenshots) Open the Microsoft Store Search for Windows Terminal Choose the first option - Windows Terminal (Preview) Install it by clicking 'Get' Once installed, you will see it under 'Recently Added' in the Windows menu Open Windows Terminal To get access to your Ubuntu system, click the down arrow in the menu bar Select Ubuntu-18.04, and your Ubuntu terminal will open The Way Forward As you proceed through the remainder of the Installation Guide, you will generally follow the steps for 'Linux Users' and enter the commands into the Ubuntu Terminal we just installed. Occasionally there will be differences between Linux and Windows steps - these will be clearly marked by a separate header 'Windows Users.'","title":"Windows Subsystem"},{"location":"windows-wsl/#windows-subsystem-for-linux","text":"Windows Users Only! This page is only for those who are using Windows. Those with Mac or Linux operating systems can proceed to 'Command Line Tools.' Windows Subsystem for Linux (WSL) is a feature in Windows 10 that enables you to use Linux command-line tools on your Windows system. By installing this feature, everyone in the course will be able to run the same commands, and get the same output - an essential aspect of reproducibility. We hope that you will continue to use the WSL features we introduce to you over the next three weeks after the course is over for your own research related computing. The process for installing everything we need here is quite order dependent - follow the steps in the order they appear below. Want More Information? For more information about the Windows Subsystem for Linux, look here . Up to Date Windows 10 Required! To go further with this Installation Guide you need to have an up to date installation of Windows 10. IT Services in the Econ Department have assured us, if you update Windows to the latest version in your UZH laptop everything that follows will work. If you do not have a Windows 10 machine. Contact us!","title":"Windows Subsystem For Linux"},{"location":"windows-wsl/#install-the-windows-subsystem-for-linux","text":"As a first step we need to install the Windows Linux Subsystem. Proceed as follows: Open 'Settings' by searching for it in the search bar In Setting, search for 'Apps & features' Scroll down and click on 'Programs and Features' On the left, click on 'Turn Windows features on or off' Scroll down until you see 'Windows Subsystem for Linux' and click the box, and then click 'OK' A prompt to restart your PC will appear, click 'Restart now' to restart your PC.","title":"Install the Windows Subsystem for Linux"},{"location":"windows-wsl/#installing-a-linux-distribution","text":"We are going to install 'Ubuntu' as our Linux distribution of choice. It is one of the more user friendly choices around. Once your PC has rebooted, proceed as follows: Open the Microsoft Store by searching for it in the search bar Search for 'Ubuntu' in the Store search bar and press enter Select 'Ubuntu 18.04 LTS' from the choices returned by clicking on it Click 'Get' to install Once installed, if you open the Windows Menu, you will See 'Ubuntu 18.04 LTS' under 'Recently Added' Click on 'Ubuntu 18.04 LTS.' A black terminal will open, and inform you it is installing Once installed, it will prompt you to create an account. Enter a username And a password (Note: as you enter a password nothing will appear) Re-enter the password as instructed The installation will now have completed","title":"Installing a Linux Distribution"},{"location":"windows-wsl/#wsl-not-enabled-errors","text":"WSL not enabled If at Step 6, you see the following: This means you have not successfully installed the Windows Subsystem for Linux, or you did not restart your machine as instructed. Try to either: Restart your PC Return here and redo the process.","title":"WSL Not Enabled Errors"},{"location":"windows-wsl/#installing-windows-terminal","text":"The terminal that comes with Ubuntu 18.04 LTS out of the box is not our favorite, so we will install something a little better. Proceed as follows: (You should be more comfortable installing stuff from the store now, so we will skip the screenshots) Open the Microsoft Store Search for Windows Terminal Choose the first option - Windows Terminal (Preview) Install it by clicking 'Get' Once installed, you will see it under 'Recently Added' in the Windows menu Open Windows Terminal To get access to your Ubuntu system, click the down arrow in the menu bar Select Ubuntu-18.04, and your Ubuntu terminal will open","title":"Installing Windows Terminal"},{"location":"windows-wsl/#the-way-forward","text":"As you proceed through the remainder of the Installation Guide, you will generally follow the steps for 'Linux Users' and enter the commands into the Ubuntu Terminal we just installed. Occasionally there will be differences between Linux and Windows steps - these will be clearly marked by a separate header 'Windows Users.'","title":"The Way Forward"}]}