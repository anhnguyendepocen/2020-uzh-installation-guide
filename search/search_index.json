{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Installation Guide These pages should help you to get started setting up the computing environment on your machine ready for the course \"Programming Practices for Research in Economics\" at the University of Zurich in Winter 2020 . Please attempt to install necessary software and packages prior to the beginning of the course. Summary If everything goes smoothly, you should be able to complete the installation in one sitting which should take about 2 hours. Please follow the steps one-by-one in the order they appear on the side bar and do not deviate from them, unless you really know what you are doing. If you find any outdated links or unclear descriptions, email us at pp4rs.contact@gmail.com so that we can update the instructions or clarify as needed. Where necessary, we have provided instructions for Mac, Windows and Linux machines. Windows Users This version of the installation guide contains a new approach to setting up your machine compared to our previous courses. If you previously sat in any of the Programming Practices courses in 2018 or 2019, you will need to work through this guide from start to finish.","title":"Welcome"},{"location":"#installation-guide","text":"These pages should help you to get started setting up the computing environment on your machine ready for the course \"Programming Practices for Research in Economics\" at the University of Zurich in Winter 2020 . Please attempt to install necessary software and packages prior to the beginning of the course. Summary If everything goes smoothly, you should be able to complete the installation in one sitting which should take about 2 hours. Please follow the steps one-by-one in the order they appear on the side bar and do not deviate from them, unless you really know what you are doing. If you find any outdated links or unclear descriptions, email us at pp4rs.contact@gmail.com so that we can update the instructions or clarify as needed. Where necessary, we have provided instructions for Mac, Windows and Linux machines. Windows Users This version of the installation guide contains a new approach to setting up your machine compared to our previous courses. If you previously sat in any of the Programming Practices courses in 2018 or 2019, you will need to work through this guide from start to finish.","title":"Installation Guide"},{"location":"acknowledgement/","text":"Acknowledgements This module is based on the previous versions of the course: 2017 edition , by Lachlan Deer, Adrian Etter, Julian Langer & Max Winkler 2018 edition , by Ulrich Bergmann, Ursina Schaede, Dora Simon, Carlo Zanella & Christian Zuend 2019 Foundations edition , by Lachlan Deer & Julian Langer It is designed after and borrows a lot from: Effective Programming Practices for Economists , a course by Hans-Martin von Gaudecker Software Carpentry's Managing Software Research Projects lesson","title":"Acknowledgements"},{"location":"acknowledgement/#acknowledgements","text":"This module is based on the previous versions of the course: 2017 edition , by Lachlan Deer, Adrian Etter, Julian Langer & Max Winkler 2018 edition , by Ulrich Bergmann, Ursina Schaede, Dora Simon, Carlo Zanella & Christian Zuend 2019 Foundations edition , by Lachlan Deer & Julian Langer It is designed after and borrows a lot from: Effective Programming Practices for Economists , a course by Hans-Martin von Gaudecker Software Carpentry's Managing Software Research Projects lesson","title":"Acknowledgements"},{"location":"citation-license/","text":"License Material is licensed under a CC-BY-NC-SA license. Further information is available at our course homepage Suggested Citation: Ulrich Bergmann Matteo Courthoud and Lachlan Deer, 2020, Installation Guide , Programming Practices for Research in Economics, University of Zurich","title":"Citation & License"},{"location":"citation-license/#license","text":"Material is licensed under a CC-BY-NC-SA license. Further information is available at our course homepage","title":"License"},{"location":"citation-license/#suggested-citation","text":"Ulrich Bergmann Matteo Courthoud and Lachlan Deer, 2020, Installation Guide , Programming Practices for Research in Economics, University of Zurich","title":"Suggested Citation:"},{"location":"commandLine/","text":"Command Line Tools A command-line interface or command language interpreter (CLI), also known as a terminal, is a means of interacting with a computer program where the user issues commands to the program in the form of successive lines of text (command lines). Throughout the course we will emphasize use of the terminal and executing commands within it as our modus operandi. Windows Users So that we can work as closely as possible to the Mac and Linux users we will install Cygwin . Download Cygwin here and use the graphical installer. Accept all the default options. Choose any server from which to download cygwin and packages when prompted. Verify your installation by opening Cygwin. When it opens you should see a black box with some text that looks like: userName@computerName: ~$ i.e. for Uli he sees: ubergmann@dhcp-wlan-uzh-10-12-130-xxx: ~$ We will explain what all this means in the first day or so of the course. Why Cygwin We will uses Cygwin as our command line tool, and unlike other Windows shells such as PowerShell it uses Unix syntax. Anywhere throughout the remainder of the installation guide where we suggest you to enter a command into a terminal, enter the text-based command into your Cygwin terminal followed by pressing Return , for example: userName@computerName: ~$ whoami Should return your username. Do Not Delete the Install File Do not delete the setup-x86_64.exe file. It needs to be kept so that we can add on some additional packages to use in the course. Mac Users A command line interface comes already installed with OSX. You will need to install some other software from the terminal thoughout the course, so it will be useful to install some additional \"command line tools\" now: First we want to install X-code command line tools. Open a terminal by searching for it with spotlight, cmd + spacebar then type terminal and press Return when it appears. Then, copy and paste the following xcode-select --install If you get an answer that the command line tools are already installed, you can just continue to the next step. Second, install Homebrew by opening a terminal and pasting the following command: ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" To verify that Homebrew installed correctly, enter the following into your terminal brew doctor And you should see the following output Your system is ready to brew Now we can use homebrew to easily install software. To use the current R version 3.5.1, we want to make sure you have some basic system tools that some packages require. Let's (re)install them real quick. First libxml2 : brew reinstall libxml2 If you system tells you that it is not yet installed, then try brew install libxml2 instead. We also want to link this so that terminal finds it later: echo 'export PATH=\"/usr/local/opt/libxml2/bin:$PATH\"' >> ~/.bash_profile Second, we also need openssl : brew reinstall openssl Again, if it is already installed, then use brew install openssl instead. Again, we need it to link to terminal: echo 'export PATH=\"/usr/local/opt/openssl/bin:$PATH\"' >> ~/.bash_profile Finally, we need libgit2 : brew install libgit2 If terminal tells you it is not yet installed, then go for brew reinstall libgit2 Linux Users To use the current R version, wee need to install some system tools. For this open a terminal session with Crtl + Alt + T . Now copy the following command into terminal and press Enter : sudo apt-get install libcurl4-gnutls-dev librtmp-dev After the installation succeeded successfully repeat this one-by-one with the following two other commands: sudo apt-get install libxml2-dev sudo apt-get install libssl-dev","title":"Command Line Tools"},{"location":"commandLine/#command-line-tools","text":"A command-line interface or command language interpreter (CLI), also known as a terminal, is a means of interacting with a computer program where the user issues commands to the program in the form of successive lines of text (command lines). Throughout the course we will emphasize use of the terminal and executing commands within it as our modus operandi.","title":"Command Line Tools"},{"location":"commandLine/#windows-users","text":"So that we can work as closely as possible to the Mac and Linux users we will install Cygwin . Download Cygwin here and use the graphical installer. Accept all the default options. Choose any server from which to download cygwin and packages when prompted. Verify your installation by opening Cygwin. When it opens you should see a black box with some text that looks like: userName@computerName: ~$ i.e. for Uli he sees: ubergmann@dhcp-wlan-uzh-10-12-130-xxx: ~$ We will explain what all this means in the first day or so of the course. Why Cygwin We will uses Cygwin as our command line tool, and unlike other Windows shells such as PowerShell it uses Unix syntax. Anywhere throughout the remainder of the installation guide where we suggest you to enter a command into a terminal, enter the text-based command into your Cygwin terminal followed by pressing Return , for example: userName@computerName: ~$ whoami Should return your username. Do Not Delete the Install File Do not delete the setup-x86_64.exe file. It needs to be kept so that we can add on some additional packages to use in the course.","title":"Windows Users"},{"location":"commandLine/#mac-users","text":"A command line interface comes already installed with OSX. You will need to install some other software from the terminal thoughout the course, so it will be useful to install some additional \"command line tools\" now: First we want to install X-code command line tools. Open a terminal by searching for it with spotlight, cmd + spacebar then type terminal and press Return when it appears. Then, copy and paste the following xcode-select --install If you get an answer that the command line tools are already installed, you can just continue to the next step. Second, install Homebrew by opening a terminal and pasting the following command: ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" To verify that Homebrew installed correctly, enter the following into your terminal brew doctor And you should see the following output Your system is ready to brew Now we can use homebrew to easily install software. To use the current R version 3.5.1, we want to make sure you have some basic system tools that some packages require. Let's (re)install them real quick. First libxml2 : brew reinstall libxml2 If you system tells you that it is not yet installed, then try brew install libxml2 instead. We also want to link this so that terminal finds it later: echo 'export PATH=\"/usr/local/opt/libxml2/bin:$PATH\"' >> ~/.bash_profile Second, we also need openssl : brew reinstall openssl Again, if it is already installed, then use brew install openssl instead. Again, we need it to link to terminal: echo 'export PATH=\"/usr/local/opt/openssl/bin:$PATH\"' >> ~/.bash_profile Finally, we need libgit2 : brew install libgit2 If terminal tells you it is not yet installed, then go for brew reinstall libgit2","title":"Mac Users"},{"location":"commandLine/#linux-users","text":"To use the current R version, wee need to install some system tools. For this open a terminal session with Crtl + Alt + T . Now copy the following command into terminal and press Enter : sudo apt-get install libcurl4-gnutls-dev librtmp-dev After the installation succeeded successfully repeat this one-by-one with the following two other commands: sudo apt-get install libxml2-dev sudo apt-get install libssl-dev","title":"Linux Users"},{"location":"contact/","text":"Contact Us Programming Practices Team Programming Practices for Research in Economics was created by Lachlan Deer Adrian Etter Julian Langer Max Winkler at the Department of Economics, University of Zurich in 2016. This installation guide is for the 2020 edition, conducted by Ulrich Bergmann Lachlan Deer Matteo Courthoud Questions or Comments? Please contact us via email: pp4rs.contact \"AT\" gmail.com with the title \"Installation Guide: Programming Practices for Research in Economics.\" We look forward to hearing from you if you have questions about the installation guide, found this installation guide useful, or have further comments or suggestions to improve it.","title":"Contact Us"},{"location":"contact/#contact-us","text":"","title":"Contact Us"},{"location":"contact/#programming-practices-team","text":"Programming Practices for Research in Economics was created by Lachlan Deer Adrian Etter Julian Langer Max Winkler at the Department of Economics, University of Zurich in 2016. This installation guide is for the 2020 edition, conducted by Ulrich Bergmann Lachlan Deer Matteo Courthoud","title":"Programming Practices Team"},{"location":"contact/#questions-or-comments","text":"Please contact us via email: pp4rs.contact \"AT\" gmail.com with the title \"Installation Guide: Programming Practices for Research in Economics.\" We look forward to hearing from you if you have questions about the installation guide, found this installation guide useful, or have further comments or suggestions to improve it.","title":"Questions or Comments?"},{"location":"finish-line/","text":"","title":"Finish line"},{"location":"gitInstall/","text":"Installing Git and Setting Up Accounts Git is a Version Control System (VCS) that has gained a lot of traction among the programming community. We will want to use version control to keep track of the files we write, and the changes we make to them. Account Creation During the course we will show you how to use GitHub to host some of your work and do code related project management. You will need to set up an account: Please register for a GitHub account Mac Users On MacOS, download and install Git from here . If your system says it can't be opened, because it is from an unidentified developer, then open it via right-lick and open . Also install the command-line auto-completion script. For this go to this website . You should now see a the text file starting with # bash/zsh completion support for core Git. # # Copyright (C) 2006,2007 Shawn O. Pearce <spearce@spearce.org> # Conceptually based on gitcompletion (http://gitweb.hawaga.org.uk/). # Distributed under the GNU General Public License, version 2.0. save this file as git-completion.bash to your user folder by pressing CMD+s . If you want to know where your user folder is, open a terminal and type pwd . For Uli it is for example under /Users/ubergmann . If you use Safari, make sure to save the file as Page Source and don't append a .txt to its filename (Chrome does this automatically). If everything went right, you can now type ls in your terminal window and should see git-completion.bash there between other files. Linux Users Follow the steps documented here to install on Linux from the terminal. Danger To install system software using apt-get , you need Super User rights. So please add sudo in front of each apt-get command in the document above, like so: sudo apt-get install git Windows Users Download and install the latest versions of msysgit After installing these programs use Windows Explorer to go to a folder that contains some documents (any folder) and right click on it. You should see some additional items - \"GitBash\" appear in the context menu upon right-clicking. Windows PATH Setting Redux We also want Git from the command line, so we again need to update our PATH settings. Right-click on Computer. Then go to \"Properties\" and select the tab \"Advanced System settings\". Choose \"Environment Variables\" and select Path from the list of system variables. Choose Edit . On Windows 7 or 8 machines: If you accepted all defaults during your installation, and didn't have any other non-default setting prior to starting this guide, modifying the following string, copy and paste the following string without spaces at the start or end: ;C:\\Program Files\\Git\\bin On Windows 10 machines: Click New and paste the following string: C:\\Program Files\\Git\\bin Click on OK as often as needed. Verifying your install To verify your installation, type the following command in a terminal and press the return key: git --version You should get an output that looks like: git version 2.18.0 Ensure that you have a version greater than 2.15.0 installed.","title":"Git"},{"location":"gitInstall/#installing-git-and-setting-up-accounts","text":"Git is a Version Control System (VCS) that has gained a lot of traction among the programming community. We will want to use version control to keep track of the files we write, and the changes we make to them.","title":"Installing Git and Setting Up Accounts"},{"location":"gitInstall/#account-creation","text":"During the course we will show you how to use GitHub to host some of your work and do code related project management. You will need to set up an account: Please register for a GitHub account","title":"Account Creation"},{"location":"gitInstall/#mac-users","text":"On MacOS, download and install Git from here . If your system says it can't be opened, because it is from an unidentified developer, then open it via right-lick and open . Also install the command-line auto-completion script. For this go to this website . You should now see a the text file starting with # bash/zsh completion support for core Git. # # Copyright (C) 2006,2007 Shawn O. Pearce <spearce@spearce.org> # Conceptually based on gitcompletion (http://gitweb.hawaga.org.uk/). # Distributed under the GNU General Public License, version 2.0. save this file as git-completion.bash to your user folder by pressing CMD+s . If you want to know where your user folder is, open a terminal and type pwd . For Uli it is for example under /Users/ubergmann . If you use Safari, make sure to save the file as Page Source and don't append a .txt to its filename (Chrome does this automatically). If everything went right, you can now type ls in your terminal window and should see git-completion.bash there between other files.","title":"Mac Users"},{"location":"gitInstall/#linux-users","text":"Follow the steps documented here to install on Linux from the terminal. Danger To install system software using apt-get , you need Super User rights. So please add sudo in front of each apt-get command in the document above, like so: sudo apt-get install git","title":"Linux Users"},{"location":"gitInstall/#windows-users","text":"Download and install the latest versions of msysgit After installing these programs use Windows Explorer to go to a folder that contains some documents (any folder) and right click on it. You should see some additional items - \"GitBash\" appear in the context menu upon right-clicking. Windows PATH Setting Redux We also want Git from the command line, so we again need to update our PATH settings. Right-click on Computer. Then go to \"Properties\" and select the tab \"Advanced System settings\". Choose \"Environment Variables\" and select Path from the list of system variables. Choose Edit . On Windows 7 or 8 machines: If you accepted all defaults during your installation, and didn't have any other non-default setting prior to starting this guide, modifying the following string, copy and paste the following string without spaces at the start or end: ;C:\\Program Files\\Git\\bin On Windows 10 machines: Click New and paste the following string: C:\\Program Files\\Git\\bin Click on OK as often as needed.","title":"Windows Users"},{"location":"gitInstall/#verifying-your-install","text":"To verify your installation, type the following command in a terminal and press the return key: git --version You should get an output that looks like: git version 2.18.0 Ensure that you have a version greater than 2.15.0 installed.","title":"Verifying your install"},{"location":"pandoc/","text":"Pandoc Pandoc is an extremely useful 'swiss army knife' for converting between different types of markup languages from the command line. For example, it readily builds PDFs with latex, and markdown - both of which are heavily used in academic research. We do not actively teach how to use Pandoc in the course - but we will utilize it in some lessons where we produce PDF, Word or HTML output from plain text files. Linux Open a terminal window and type sudo apt install pandoc to install pandoc from the command line Mac Open a terminal window and type brew install pandoc to install pandoc from the command line Windows Go to the Pandoc Homepage and follow the installation instructions for your operating system. Verify Your Install Verify your install by typing the following into a command line: pandoc --version The expected output starts with the following information: pandoc 1.19.2.1 Ensure you have at least version 1.15.1 installed. Windows PATH Setting redux Because we want Pandoc available from the command line (it is by default for Mac and Linux), we again need to update our PATH settings. Right-click on Computer. Then go to \"Properties\" and select the tab \"Advanced System Settings\". Choose \"Environment Variables\" and select Path from the list of system variables. Check whether the following path has been added: ;C:\\Users\\username\\AppData\\Local\\Pandoc Windows 7 or 8 machines: If it has not been, and you accepted all defaults during your installation, and didn't have any other non-default setting prior to starting this guide, copy and paste the following string without spaces at the start or end, updating the username : ;C:\\Users\\username\\AppData\\Local\\Pandoc Windows 10 machines: If it has not been added, Click New and paste the following string, updating the username: C:\\Users\\username\\AppData\\Local\\Pandoc Click OK as often as needed. After you have done this, open a new terminal and try and verify your install.","title":"LaTeX & Pandoc"},{"location":"pandoc/#pandoc","text":"Pandoc is an extremely useful 'swiss army knife' for converting between different types of markup languages from the command line. For example, it readily builds PDFs with latex, and markdown - both of which are heavily used in academic research. We do not actively teach how to use Pandoc in the course - but we will utilize it in some lessons where we produce PDF, Word or HTML output from plain text files.","title":"Pandoc"},{"location":"pandoc/#linux","text":"Open a terminal window and type sudo apt install pandoc to install pandoc from the command line","title":"Linux"},{"location":"pandoc/#mac","text":"Open a terminal window and type brew install pandoc to install pandoc from the command line","title":"Mac"},{"location":"pandoc/#windows","text":"Go to the Pandoc Homepage and follow the installation instructions for your operating system.","title":"Windows"},{"location":"pandoc/#verify-your-install","text":"Verify your install by typing the following into a command line: pandoc --version The expected output starts with the following information: pandoc 1.19.2.1 Ensure you have at least version 1.15.1 installed. Windows PATH Setting redux Because we want Pandoc available from the command line (it is by default for Mac and Linux), we again need to update our PATH settings. Right-click on Computer. Then go to \"Properties\" and select the tab \"Advanced System Settings\". Choose \"Environment Variables\" and select Path from the list of system variables. Check whether the following path has been added: ;C:\\Users\\username\\AppData\\Local\\Pandoc Windows 7 or 8 machines: If it has not been, and you accepted all defaults during your installation, and didn't have any other non-default setting prior to starting this guide, copy and paste the following string without spaces at the start or end, updating the username : ;C:\\Users\\username\\AppData\\Local\\Pandoc Windows 10 machines: If it has not been added, Click New and paste the following string, updating the username: C:\\Users\\username\\AppData\\Local\\Pandoc Click OK as often as needed. After you have done this, open a new terminal and try and verify your install.","title":"Verify Your Install"},{"location":"path-setting/","text":"Making Path Settings Permanent For our workflow be be command line driven, we need to be able to call software from the command line. Whilst much of the software we have installed as automatically made this possible, it is not universally the case. Here we will make the extra few changes we need to complete the installation guide. Windows Users (for Windows 8 and 10) You will need local administration rights for your computer, but you should have these on your personal computers or ones owned by the Department. Right-click on Computer. Then go to \"Properties\" and select the tab \"Advanced System settings\". Choose \"Environment Variables\" and select \"Path\" from the list of system variables. Choose \u201cEdit\u201d and append (i.e., do not overwrite the previous value): ;C:\\Path\\to\\program.exe to the variable value \u2013 make sure the rest remains as it is and do not include spaces between the \";\" and the text. Click on OK as often as needed. If you accepted all defaults during your installation, and didn't have any other non-default setting prior to starting this guide, modifying the following string, with your relevant username should work: ;C:\\Users\\ldeer\\AppData\\Local\\atom\\bin ;C:\\Program Files\\Git\\bin ;C:\\Program Files\\R\\R-3.X.X\\bin ; Mac Users (Slight Modifications for Linux Users) You will need to add a line to the file \".bash_profile\" or potentially create the file if it didn't already exist. This file lives in your home directory and it is hidden from your view by default. We now provide a guide of how to create / adjust this file using a tiny editor called nano, if you are familiar with editing text files, just use your editor of choice. Open a Terminal and type: nano ~/.bash_profile If .bash_profile already existed, you will see some text at this point. If so, use the arrow keys to scroll all the way to the bottom of the file. Add the following line at the end of the file: export PATH=\"${PATH}:/path/to/program/inside/package\" for each program we need to make accessible. For example to make matlab accessible from the command line: export PATH=\"${PATH}:/Applications/MATLAB_R2016a.app/bin/matlab Please do this for the following software: Sublime Text Git Matlab R Once you have finished, press Return and then ctrl+o (= WriteOut = save) and Return once more. Your default locale settings may conflict with some of the programs we'll need. If you want to be on the safe side, add these lines to your .bash_profile file: export LC_ALL=en_US.UTF-8 export LANG=en_US.UTF-8 Thanks for Hans-Martin von Gaudecker, and in turn Matthias Bannert for the tip on locale settings. Linux users : For most distributions, everything here applies to the file .bashrc instead of .bash_profile. The End Well done - it's time for a beer, or some other cold beverage to celebrate completing this guide.","title":"Making Path Settings Permanent"},{"location":"path-setting/#making-path-settings-permanent","text":"For our workflow be be command line driven, we need to be able to call software from the command line. Whilst much of the software we have installed as automatically made this possible, it is not universally the case. Here we will make the extra few changes we need to complete the installation guide.","title":"Making Path Settings Permanent"},{"location":"path-setting/#windows-users-for-windows-8-and-10","text":"You will need local administration rights for your computer, but you should have these on your personal computers or ones owned by the Department. Right-click on Computer. Then go to \"Properties\" and select the tab \"Advanced System settings\". Choose \"Environment Variables\" and select \"Path\" from the list of system variables. Choose \u201cEdit\u201d and append (i.e., do not overwrite the previous value): ;C:\\Path\\to\\program.exe to the variable value \u2013 make sure the rest remains as it is and do not include spaces between the \";\" and the text. Click on OK as often as needed. If you accepted all defaults during your installation, and didn't have any other non-default setting prior to starting this guide, modifying the following string, with your relevant username should work: ;C:\\Users\\ldeer\\AppData\\Local\\atom\\bin ;C:\\Program Files\\Git\\bin ;C:\\Program Files\\R\\R-3.X.X\\bin ;","title":"Windows Users (for Windows 8 and 10)"},{"location":"path-setting/#mac-users-slight-modifications-for-linux-users","text":"You will need to add a line to the file \".bash_profile\" or potentially create the file if it didn't already exist. This file lives in your home directory and it is hidden from your view by default. We now provide a guide of how to create / adjust this file using a tiny editor called nano, if you are familiar with editing text files, just use your editor of choice. Open a Terminal and type: nano ~/.bash_profile If .bash_profile already existed, you will see some text at this point. If so, use the arrow keys to scroll all the way to the bottom of the file. Add the following line at the end of the file: export PATH=\"${PATH}:/path/to/program/inside/package\" for each program we need to make accessible. For example to make matlab accessible from the command line: export PATH=\"${PATH}:/Applications/MATLAB_R2016a.app/bin/matlab Please do this for the following software: Sublime Text Git Matlab R Once you have finished, press Return and then ctrl+o (= WriteOut = save) and Return once more. Your default locale settings may conflict with some of the programs we'll need. If you want to be on the safe side, add these lines to your .bash_profile file: export LC_ALL=en_US.UTF-8 export LANG=en_US.UTF-8 Thanks for Hans-Martin von Gaudecker, and in turn Matthias Bannert for the tip on locale settings. Linux users : For most distributions, everything here applies to the file .bashrc instead of .bash_profile.","title":"Mac Users (Slight Modifications for Linux Users)"},{"location":"path-setting/#the-end","text":"Well done - it's time for a beer, or some other cold beverage to celebrate completing this guide.","title":"The End"},{"location":"python-more/","text":"Additional Python packages Anaconda's Python Distribution comes with many of the packages we need to do scientific computing. If you're interested in all the packages included, click here and go to the Python 3.6 tab. Howevever, you may come across packages that are not installed by default. In this case we recommend you use the pip package management tool to install them. Note If your python 3 was found via python3 --version on the previous page, then type pip3 instead of pip for all of the following python plugins. First let us update pip by typing the following into the terminal pip install --upgrade pip If you get an error, try typing instead: python -m pip install --upgrade pip For this course, we will need the package Selenium as part of the web scraping tool kit we will build up. First let us install a depency for it via pip install msgpack We then install selenium by entering the following into a terminal: pip install selenium pip will then go through and install the package we asked for, and any other dependencies. If this succeeded, the last line it printed out should be: Successfully installed selenium-3.14.0 More packages Please also install the following packages: linearmodels","title":"Python Extras"},{"location":"python-more/#additional-python-packages","text":"Anaconda's Python Distribution comes with many of the packages we need to do scientific computing. If you're interested in all the packages included, click here and go to the Python 3.6 tab. Howevever, you may come across packages that are not installed by default. In this case we recommend you use the pip package management tool to install them. Note If your python 3 was found via python3 --version on the previous page, then type pip3 instead of pip for all of the following python plugins. First let us update pip by typing the following into the terminal pip install --upgrade pip If you get an error, try typing instead: python -m pip install --upgrade pip For this course, we will need the package Selenium as part of the web scraping tool kit we will build up. First let us install a depency for it via pip install msgpack We then install selenium by entering the following into a terminal: pip install selenium pip will then go through and install the package we asked for, and any other dependencies. If this succeeded, the last line it printed out should be: Successfully installed selenium-3.14.0","title":"Additional Python packages"},{"location":"python-more/#more-packages","text":"Please also install the following packages: linearmodels","title":"More packages"},{"location":"python/","text":"Installing Anaconda Python Anaconda is a pre-packaged Python distribution for scientific users. Direct your browser to Anaconda download page and download the Python 3.6 Graphical Installer for your machine. Follow the steps provided on the website. During the installation you will be asked whether you want Anaconda Python to be added to your PATH. Click yes! Even if the installation window gives a warning about adding it to your PATH, please still check that box. For Windows Users: When asked if you want single or multiple user installation, choose single user Accept all defaults that are set in the installation window Check the box for adding Anaconda to your PATH In the last step, you are asked if you want Visual Studio, click Yes . For Linux Users: For some users Python was not added to the path. To quickly do this, please open a terminal window, paste echo '$HOME/anaconda3/bin:$PATH' >> ~/.bashrc and press Return . Verifying that the installation was successful To verify that the correct version of Python has been installed and was made available in your PATH settings, close your terminal and open a new terminal interface and enter: python --version followed by hitting the Return key. You should see the following information returned: Windows users: Python 3.6.5 :: Anaconda, Inc. Mac & Linux/Ubuntu users: Python 3.6.2 :: Anaconda custom (64-bit) Python 2 vs Python 3 Python 2 and 3 are incompatible in syntax. If you had Python 2 previously installed on your machine, you might have seen Python 2.x.x above. In that case try typing python3 --version instead. Now you should see a message like the one above and are good to go for the course.","title":"Python"},{"location":"python/#installing-anaconda-python","text":"Anaconda is a pre-packaged Python distribution for scientific users. Direct your browser to Anaconda download page and download the Python 3.6 Graphical Installer for your machine. Follow the steps provided on the website. During the installation you will be asked whether you want Anaconda Python to be added to your PATH. Click yes! Even if the installation window gives a warning about adding it to your PATH, please still check that box. For Windows Users: When asked if you want single or multiple user installation, choose single user Accept all defaults that are set in the installation window Check the box for adding Anaconda to your PATH In the last step, you are asked if you want Visual Studio, click Yes . For Linux Users: For some users Python was not added to the path. To quickly do this, please open a terminal window, paste echo '$HOME/anaconda3/bin:$PATH' >> ~/.bashrc and press Return .","title":"Installing Anaconda Python"},{"location":"python/#verifying-that-the-installation-was-successful","text":"To verify that the correct version of Python has been installed and was made available in your PATH settings, close your terminal and open a new terminal interface and enter: python --version followed by hitting the Return key. You should see the following information returned:","title":"Verifying that the installation was successful"},{"location":"python/#windows-users","text":"Python 3.6.5 :: Anaconda, Inc.","title":"Windows users:"},{"location":"python/#mac-linuxubuntu-users","text":"Python 3.6.2 :: Anaconda custom (64-bit) Python 2 vs Python 3 Python 2 and 3 are incompatible in syntax. If you had Python 2 previously installed on your machine, you might have seen Python 2.x.x above. In that case try typing python3 --version instead. Now you should see a message like the one above and are good to go for the course.","title":"Mac &amp; Linux/Ubuntu users:"},{"location":"r/","text":"R and RStudio R is a language for statistical computing and graphics. R's use in the data science and econometrics community has taken off over recent years and (at a bare minimum) should be considered as an open source replacement to Stata. Installing R Go to the R homepage and download the installer for your operating system. The current version for Mac and Windows is R version 3.5.1 and for Linux it is R version 3.4.1 Installing RStudio RStudio provides an easy to work with interface to R, and its format should feel familiar to Stata and Matlab users. Download and install the free version of RStudio for your operating system from here . Verifying your Install of R Open a terminal and enter: R --version followed by pressing Return . The expected return begins with: R version 3.x.1 (201x-xx-xx) -- \"Some Funky Name\" You should see the version corresponding to the one chosen on the website. Windows PATH Setting redux If you want R available from the command line (it is by default for Mac and Linux), we again need to update our PATH settings. Right-click on Computer. Then go to \"Properties\" and select the tab \"Advanced System settings\". Choose \"Environment Variables\" and select Path from the list of system variables. Choose Edit . Windows 7 and 8 machines: If you accepted all defaults during your installation, and didn't have any other non-default setting prior to starting this guide, copy and paste the following string without spaces at the start or end: ;C:\\Program Files\\R\\R-3.5.1\\bin Windows 10 machines: Click New and paste the following string: C:\\Program Files\\R\\R-3.5.1\\bin Click on OK as often as needed. After you have done this, open a new terminal and try and verify your install. Installing Additional R Packages We will need some additional libraries to conduct our statistical analysis. Proceed as follows: Open RStudio In the console , copy and paste the following: uzh_progecon <- c( \"reshape\", \"rmarkdown\", \"plm\", \"Hmisc\", \"sandwich\", \"Ecdat\", \"stargazer\", \"knitr\", \"httr\", \"rvest\", \"xml2\", \"xtable\",\"tidyverse\", \"AER\", \"rdd\", \"car\", \"aod\", \"lmtest\", \"lfe\", \"nlme\", \"lme4\", \"erer\", \"margins\", \"multiwayvcov\", \"RSQLite\", \"dbplyr\") install.packages(uzh_progecon) If you are asked if you want to install packages that need compilation, type y followed by Return to confirm this. Wait until all the packages have been installed and the you are done. It may take a while, so be patient","title":"R"},{"location":"r/#r-and-rstudio","text":"R is a language for statistical computing and graphics. R's use in the data science and econometrics community has taken off over recent years and (at a bare minimum) should be considered as an open source replacement to Stata.","title":"R and RStudio"},{"location":"r/#installing-r","text":"Go to the R homepage and download the installer for your operating system. The current version for Mac and Windows is R version 3.5.1 and for Linux it is R version 3.4.1","title":"Installing R"},{"location":"r/#installing-rstudio","text":"RStudio provides an easy to work with interface to R, and its format should feel familiar to Stata and Matlab users. Download and install the free version of RStudio for your operating system from here .","title":"Installing RStudio"},{"location":"r/#verifying-your-install-of-r","text":"Open a terminal and enter: R --version followed by pressing Return . The expected return begins with: R version 3.x.1 (201x-xx-xx) -- \"Some Funky Name\" You should see the version corresponding to the one chosen on the website. Windows PATH Setting redux If you want R available from the command line (it is by default for Mac and Linux), we again need to update our PATH settings. Right-click on Computer. Then go to \"Properties\" and select the tab \"Advanced System settings\". Choose \"Environment Variables\" and select Path from the list of system variables. Choose Edit . Windows 7 and 8 machines: If you accepted all defaults during your installation, and didn't have any other non-default setting prior to starting this guide, copy and paste the following string without spaces at the start or end: ;C:\\Program Files\\R\\R-3.5.1\\bin Windows 10 machines: Click New and paste the following string: C:\\Program Files\\R\\R-3.5.1\\bin Click on OK as often as needed. After you have done this, open a new terminal and try and verify your install.","title":"Verifying your Install of R"},{"location":"r/#installing-additional-r-packages","text":"We will need some additional libraries to conduct our statistical analysis. Proceed as follows: Open RStudio In the console , copy and paste the following: uzh_progecon <- c( \"reshape\", \"rmarkdown\", \"plm\", \"Hmisc\", \"sandwich\", \"Ecdat\", \"stargazer\", \"knitr\", \"httr\", \"rvest\", \"xml2\", \"xtable\",\"tidyverse\", \"AER\", \"rdd\", \"car\", \"aod\", \"lmtest\", \"lfe\", \"nlme\", \"lme4\", \"erer\", \"margins\", \"multiwayvcov\", \"RSQLite\", \"dbplyr\") install.packages(uzh_progecon) If you are asked if you want to install packages that need compilation, type y followed by Return to confirm this. Wait until all the packages have been installed and the you are done. It may take a while, so be patient","title":"Installing Additional R Packages"},{"location":"snakemake/","text":"Snakemake Snakemake is an easy to use workflow management system. It will allow us to control the execution of a set scripts by by running them from the command line. We will use make to automate the execution of our research projects with a \"single click\" so that our entire work flow is reproducible. Why a Tool to Manage Project's Execution? We strongly believe in using build tools to manage the execution of a research project - and we hope that by the end of the course you do too. Some reasons we push this topic are: Your workflow / order of execution is explicitly documented. Each time you run Snakemake, it only executes each script if the output is expected to be different from the last time your ran it. That is, it runs 'partial builds.' Its written in Python, which minimizes the learning curve needed to pick up the essentials relatively small It was designed for academic/professional research (in Bioformatics) so it feels more intuitive than most alternatives for our desired audience. Snakemake is a python package - so we can install using the default python installer, pip. Mac & Linux Users: In a terminal window enter the command: pip install snakemake followed by pressing the Return key. Verify that your installation worked correctly by entering snakemake --version into a terminal and pressing Return. The expected output is the current version on the software, which should be greater than 5.2.2 Windows users We need one extra step here. In a cygwin window enter the command: conda install datrie followed by pressing Return . If you get an access denied error, you may have not clicked on single user install in the Anaconda installation. De- and re-install Anaconda and try again. If the above command works, your terminal will look something like this: The following NEW packages will be INSTALLED: datrie: 0.7.1 proceed ([y]/n) Type y and hit enter. Once this is done, type: pip install snakemake followed by pressing the Return key. The expected output is the current version on the software, which should be greater than 5.2.2","title":"Automation with Snakemake"},{"location":"snakemake/#snakemake","text":"Snakemake is an easy to use workflow management system. It will allow us to control the execution of a set scripts by by running them from the command line. We will use make to automate the execution of our research projects with a \"single click\" so that our entire work flow is reproducible. Why a Tool to Manage Project's Execution? We strongly believe in using build tools to manage the execution of a research project - and we hope that by the end of the course you do too. Some reasons we push this topic are: Your workflow / order of execution is explicitly documented. Each time you run Snakemake, it only executes each script if the output is expected to be different from the last time your ran it. That is, it runs 'partial builds.' Its written in Python, which minimizes the learning curve needed to pick up the essentials relatively small It was designed for academic/professional research (in Bioformatics) so it feels more intuitive than most alternatives for our desired audience. Snakemake is a python package - so we can install using the default python installer, pip.","title":"Snakemake"},{"location":"snakemake/#mac-linux-users","text":"In a terminal window enter the command: pip install snakemake followed by pressing the Return key. Verify that your installation worked correctly by entering snakemake --version into a terminal and pressing Return. The expected output is the current version on the software, which should be greater than 5.2.2","title":"Mac &amp; Linux Users:"},{"location":"snakemake/#windows-users","text":"We need one extra step here. In a cygwin window enter the command: conda install datrie followed by pressing Return . If you get an access denied error, you may have not clicked on single user install in the Anaconda installation. De- and re-install Anaconda and try again. If the above command works, your terminal will look something like this: The following NEW packages will be INSTALLED: datrie: 0.7.1 proceed ([y]/n) Type y and hit enter. Once this is done, type: pip install snakemake followed by pressing the Return key. The expected output is the current version on the software, which should be greater than 5.2.2","title":"Windows users"},{"location":"textEditor/","text":"Text Editors A good text editor lies at the heart of any serious programmer's toolkit: It can do almost anything and makes you much more productive. The editors built into each program are generally are not an option (we will find certain cases where you may want to use them). Please download, install it along with the necessary packages and stick with it for at least the duration of the course and assignment to get a feel for how it works. There is a slight learning curve, but soon you hopefully be wondering why no-one forced you to do this before! We should get you past the steepest part of the learning curve during the course itself, so we don't anticipate you struggling on your own. Note None of the skills we learn in the course are tied to Atom, so if you do decide to move away to another editor, nothing will be lost. Installing Atom Mac and Windows Users Go to the downloads page and download the live installer for your operating system. Windows users download AtomSetup-x64.exe and execiute the installer Mac users download Atom-Mac.zip and copy the contained Atom.app into the applications folder Linux/Ubuntu users Enter the following information to add a repository that has the Atom installation, then press Return : sudo add-apt-repository ppa:webupd8team/atom Install Atom by entering the following commands into a terminal and then pressing Return: sudo apt update; sudo apt install atom Verifying Atom Installation We want Atom to be available from the command line. For Mac and Linux Users this is the default after you have started the program once. So please open Atom. Then open your terminal and type the following into the command line: atom --version followed by pressing Return you should see output like the following Atom : 1.28.2 Electron: 2.0.5 Chrome : 61.0.3163.100 Node : 8.9.3 Make sure that the version numbers are above 1.26.x or newer. Additional Step for Windows: Getting things to run from the command line for us is a bit harder. You will need local administration rights for your computer, but you should have these on your personal computers or those owned by the Department. Right-click on Computer. Then go to \"Properties\" and select the tab \"Advanced System Settings\". Choose \"Environment Variables\" and select Path from the list of system variables. If you accepted all defaults during your installation, and didn't have any other non-default setting prior to starting this guide, choose Edit. On Windows 7 or 8 machines: Append the following (i.e., do not overwrite the previous value) modifying the string, with your relevant username : ;C:\\Users\\username\\AppData\\Local\\atom\\bin to the variable value \u2013 make sure the rest remains as it is and do not include spaces between the \";\" and preceeding text. On Windows 10 machines: Click New and paste the following string, modifying the username C:\\Users\\username\\AppData\\Local\\atom\\bin Click on OK as often as needed. Close your current terminal session, open a new one, and again try atom . - the Atom editor will open if this was successful. Tip You will need to add a new PATH for most of the following installation steps. Always keep in mind that after you add a new PATH, you need to start a new cygwin/terminal session to verify whether it worked. Sometimes it may take a couple of minutes until your PATH is recognized by the terminal. Additional Packages for Atom One of the advantages of Atom is that there are many packages that make your life easier, ranging from simple syntax highlighting to environments that can mimic a complete graphical user interface. For this course, we will install the minimum number of packages necessary to make your coding life easier. Installing Additional Packages for Atom Atom's package manager is built in to the program itself and is relatively easy to interact with. To access Atom's settings press Ctrl + , ( CMD + , on Mac) on your keyboard then click on the Install tab which is visible on the left hand side. On the Installation page there is a prompt where you can type in a package name and then press Return and Atom will search for that package for you and return results with similar names. When you find the package that you need, you click the blue 'Install' button and the package will be installed. For this course, please install the following packages: autocomplete-R autocomplete-python (choose Jedi as your engine when asked) autoflow language-r linter linter-lintr tablr platformio-ide-terminal project-plus language-markdown markdown-table-editor markdown-preview-plus autocomplete-citeproc open-unsupported-files advanced-open-file If during the installation of a package Atom asks to install dependencies, always choose to accept. Tip If you decide to stick with Atom after this course, you may find the following packages useful in your day to day work: language-latex language-matlab language-stata atom-latex whitespace Feel free to ask us for whatever other packages we use to make our programming lives easier during some downtime.","title":"Text Editor"},{"location":"textEditor/#text-editors","text":"A good text editor lies at the heart of any serious programmer's toolkit: It can do almost anything and makes you much more productive. The editors built into each program are generally are not an option (we will find certain cases where you may want to use them). Please download, install it along with the necessary packages and stick with it for at least the duration of the course and assignment to get a feel for how it works. There is a slight learning curve, but soon you hopefully be wondering why no-one forced you to do this before! We should get you past the steepest part of the learning curve during the course itself, so we don't anticipate you struggling on your own. Note None of the skills we learn in the course are tied to Atom, so if you do decide to move away to another editor, nothing will be lost.","title":"Text Editors"},{"location":"textEditor/#installing-atom","text":"","title":"Installing Atom"},{"location":"textEditor/#mac-and-windows-users","text":"Go to the downloads page and download the live installer for your operating system. Windows users download AtomSetup-x64.exe and execiute the installer Mac users download Atom-Mac.zip and copy the contained Atom.app into the applications folder","title":"Mac and Windows Users"},{"location":"textEditor/#linuxubuntu-users","text":"Enter the following information to add a repository that has the Atom installation, then press Return : sudo add-apt-repository ppa:webupd8team/atom Install Atom by entering the following commands into a terminal and then pressing Return: sudo apt update; sudo apt install atom","title":"Linux/Ubuntu users"},{"location":"textEditor/#verifying-atom-installation","text":"We want Atom to be available from the command line. For Mac and Linux Users this is the default after you have started the program once. So please open Atom. Then open your terminal and type the following into the command line: atom --version followed by pressing Return you should see output like the following Atom : 1.28.2 Electron: 2.0.5 Chrome : 61.0.3163.100 Node : 8.9.3 Make sure that the version numbers are above 1.26.x or newer. Additional Step for Windows: Getting things to run from the command line for us is a bit harder. You will need local administration rights for your computer, but you should have these on your personal computers or those owned by the Department. Right-click on Computer. Then go to \"Properties\" and select the tab \"Advanced System Settings\". Choose \"Environment Variables\" and select Path from the list of system variables. If you accepted all defaults during your installation, and didn't have any other non-default setting prior to starting this guide, choose Edit. On Windows 7 or 8 machines: Append the following (i.e., do not overwrite the previous value) modifying the string, with your relevant username : ;C:\\Users\\username\\AppData\\Local\\atom\\bin to the variable value \u2013 make sure the rest remains as it is and do not include spaces between the \";\" and preceeding text. On Windows 10 machines: Click New and paste the following string, modifying the username C:\\Users\\username\\AppData\\Local\\atom\\bin Click on OK as often as needed. Close your current terminal session, open a new one, and again try atom . - the Atom editor will open if this was successful. Tip You will need to add a new PATH for most of the following installation steps. Always keep in mind that after you add a new PATH, you need to start a new cygwin/terminal session to verify whether it worked. Sometimes it may take a couple of minutes until your PATH is recognized by the terminal.","title":"Verifying Atom Installation"},{"location":"textEditor/#additional-packages-for-atom","text":"One of the advantages of Atom is that there are many packages that make your life easier, ranging from simple syntax highlighting to environments that can mimic a complete graphical user interface. For this course, we will install the minimum number of packages necessary to make your coding life easier.","title":"Additional Packages for Atom"},{"location":"textEditor/#installing-additional-packages-for-atom","text":"Atom's package manager is built in to the program itself and is relatively easy to interact with. To access Atom's settings press Ctrl + , ( CMD + , on Mac) on your keyboard then click on the Install tab which is visible on the left hand side. On the Installation page there is a prompt where you can type in a package name and then press Return and Atom will search for that package for you and return results with similar names. When you find the package that you need, you click the blue 'Install' button and the package will be installed. For this course, please install the following packages: autocomplete-R autocomplete-python (choose Jedi as your engine when asked) autoflow language-r linter linter-lintr tablr platformio-ide-terminal project-plus language-markdown markdown-table-editor markdown-preview-plus autocomplete-citeproc open-unsupported-files advanced-open-file If during the installation of a package Atom asks to install dependencies, always choose to accept. Tip If you decide to stick with Atom after this course, you may find the following packages useful in your day to day work: language-latex language-matlab language-stata atom-latex whitespace Feel free to ask us for whatever other packages we use to make our programming lives easier during some downtime.","title":"Installing Additional Packages for Atom"},{"location":"webscraping_drivers/","text":"Web Scraping Using an Automated Browser Sometimes when we scrape the web, we need to automate our computer to open a web browser to gather information from each page. This is especially true when the site we want to scrape has content that is loaded dynamically with javascript. We will install one package to help us here: Chromedriver Installing this stuff is operating system specific, hence so are the instructions below. Mac Users Make sure your homebrew package is up-to-date. To do so, open a terminal and enter brew update Chromedriver We assume you have Google Chrome installed. If not, do this first. Install chromedriver via homebrew: brew cask install chromedriver Verify your install, by entering the following in your terminal. The expected output is ChromeDriver 2.4X.X chromedriver --version Windows Users Chromedriver Install Google Chrome from here Download the windows version of Chromedriver from here . Extract the contents from the zip file, and extract them into a new directory under C:\\chromedriver Make sure that the chromedriver.exe file is directly under the PATH you specified, i.e. under C:\\chromedriver. If your zip unpacker created a new folder with a different name inside your specified folder, move the .exe file to C:\\chromedriver . Add the directory C:\\chromedriver to your PATH as described before. If this went successfully, open a new Cygwin session, and enter chromedriver --version , you should get output that looks like ChromeDriver 2.4X.XX Linux Users Chromedriver Open a terminal session Install Google Chrome for Debian/Ubuntu by pasting the following and then pressing Return sudo apt-get install libxss1 libappindicator1 libindicator7 wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb sudo dpkg -i google-chrome*.deb sudo apt-get install -f Install xvfb so chrome can run 'headless' by pasting the following and then pressing Return sudo apt-get install xvfb Install Chromedriver by pasting the following and then pressing Return : sudo apt-get install unzip wget -N https://chromedriver.storage.googleapis.com/2.41/chromedriver_linux64.zip unzip chromedriver_linux64.zip chmod +x chromedriver sudo mv -f chromedriver /usr/local/share/chromedriver sudo ln -s /usr/local/share/chromedriver /usr/local/bin/chromedriver sudo ln -s /usr/local/share/chromedriver /usr/bin/chromedriver Your install worked, you should get ChromeDriver 2.4X.XX returned if the installation was successful chromedriver --version Hat-tip We borrowed quite liberally from Christopher Su to for instructions on installing Chrome and Chromedriver .","title":"Webscraping"},{"location":"webscraping_drivers/#web-scraping-using-an-automated-browser","text":"Sometimes when we scrape the web, we need to automate our computer to open a web browser to gather information from each page. This is especially true when the site we want to scrape has content that is loaded dynamically with javascript. We will install one package to help us here: Chromedriver Installing this stuff is operating system specific, hence so are the instructions below.","title":"Web Scraping Using an Automated Browser"},{"location":"webscraping_drivers/#mac-users","text":"Make sure your homebrew package is up-to-date. To do so, open a terminal and enter brew update","title":"Mac Users"},{"location":"webscraping_drivers/#chromedriver","text":"We assume you have Google Chrome installed. If not, do this first. Install chromedriver via homebrew: brew cask install chromedriver Verify your install, by entering the following in your terminal. The expected output is ChromeDriver 2.4X.X chromedriver --version","title":"Chromedriver"},{"location":"webscraping_drivers/#windows-users","text":"","title":"Windows Users"},{"location":"webscraping_drivers/#chromedriver_1","text":"Install Google Chrome from here Download the windows version of Chromedriver from here . Extract the contents from the zip file, and extract them into a new directory under C:\\chromedriver Make sure that the chromedriver.exe file is directly under the PATH you specified, i.e. under C:\\chromedriver. If your zip unpacker created a new folder with a different name inside your specified folder, move the .exe file to C:\\chromedriver . Add the directory C:\\chromedriver to your PATH as described before. If this went successfully, open a new Cygwin session, and enter chromedriver --version , you should get output that looks like ChromeDriver 2.4X.XX","title":"Chromedriver"},{"location":"webscraping_drivers/#linux-users","text":"","title":"Linux Users"},{"location":"webscraping_drivers/#chromedriver_2","text":"Open a terminal session Install Google Chrome for Debian/Ubuntu by pasting the following and then pressing Return sudo apt-get install libxss1 libappindicator1 libindicator7 wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb sudo dpkg -i google-chrome*.deb sudo apt-get install -f Install xvfb so chrome can run 'headless' by pasting the following and then pressing Return sudo apt-get install xvfb Install Chromedriver by pasting the following and then pressing Return : sudo apt-get install unzip wget -N https://chromedriver.storage.googleapis.com/2.41/chromedriver_linux64.zip unzip chromedriver_linux64.zip chmod +x chromedriver sudo mv -f chromedriver /usr/local/share/chromedriver sudo ln -s /usr/local/share/chromedriver /usr/local/bin/chromedriver sudo ln -s /usr/local/share/chromedriver /usr/bin/chromedriver Your install worked, you should get ChromeDriver 2.4X.XX returned if the installation was successful chromedriver --version Hat-tip We borrowed quite liberally from Christopher Su to for instructions on installing Chrome and Chromedriver .","title":"Chromedriver"},{"location":"windows-wsl/","text":"Windows Subsystem For Linux Windows Users Only! This page is only for those who are using Windows. Those with Mac or Linux operating systems can proceed to 'Command Line Tools.' Windows Subsystem for Linux (WSL) is a feature in Windows 10 that enables you to use Linux command-line tools on your Windows system. By installing this feature, everyone in the course will be able to run the same commands, and get the same output - an essential aspect of reproducibility. We hope that you will continue to use the WSL features after the course for your research related computing. The process for installing everything we need here is quite order dependent - follow the steps in the order they appear below. Want More Information? For more information about the Windows Subsystem for Linux, look here . Up to Date Windows 10 Required! To go further with this Installation Guide you need to have an up to date installation of Windows 10. IT Services in the Econ Department have assured us, if you update Windows to the latest version in your UZH laptop everything that follows will work. If you do not have a Windows 10 machine. Contact us! Install the Windows Subsystem for Linux As a first step we need to install the Windows Linux Subsystem. Proceed as follows: Open 'Settings' by searching for it in the search bar In Setting, search for 'Apps & features' Scroll down and click on 'Programs and Features' On the left, click on 'Turn Windows features on or off' Scroll down until you see 'Windows Subsystem for Linux' and click the box, and then click 'OK' A prompt to restart your PC will appear, click 'Restart now' to restart your PC. Installing a Linux Distribution We are going to install 'Ubuntu' as our Linux distribution of choice. It is one of the more user friendly choices around. Once your PC has rebooted, proceed as follows: Open the Micrsoft Store by searching for it in the search bar Search for 'Ubuntu' in the Store search bar and press enter Select 'Ubuntu 18.04 LTS' from the choices returned by clicking on it Click 'Get' to install Once installed, if you open the Windows Menu, you will See 'Ubuntu 18.04 LTS' under 'Recently Added' Click on 'Ubuntu 18.04 LTS.' A black terminal will open, and inform you it is installing Once installed, it will prompt you to create an account. Enter a username And a password (Note: as you enter a password nothing will appear) Re-enter the password as instructed The installation will now have completed WSL not enabled If at Step 6, you see the following: This means you have not successfully installed the Windows Subsystem for Linux, or you did not restart your machine as instructed. Try to either: Restart your PC Return here and redo the process. Installing Windows Terminal The terminal that comes with Ubuntu 18.04 LTS out of the box is not our favourite, so we will install something a little better. Proceed as follows: (You should be more comfortable installing stuff from the store now, so we will skip the screenshots) Open the Microsoft Store Search for Windows Terminal Choose the first option - Windows Terminal (Preview) Install it by clicking 'Get' Once installed, you will see it under 'Recently Added' in the Windows menu Open Windows Terminal To get access to your Ubuntu system, click the down arrow in the menu bar Select Ubuntu-18.04, and your Ubuntu terminal will open The Way Forward As you proceed through the remainder of the Installation Guide, you will generally follow the steps for 'Linux Users' and enter the commands into the Ubuntu Terminal we just installed. Occasionally there will be differences between Linux and Windows steps - and these will be clearly marked by a separate header 'Windows Users.'","title":"Windows Subsystem"},{"location":"windows-wsl/#windows-subsystem-for-linux","text":"Windows Users Only! This page is only for those who are using Windows. Those with Mac or Linux operating systems can proceed to 'Command Line Tools.' Windows Subsystem for Linux (WSL) is a feature in Windows 10 that enables you to use Linux command-line tools on your Windows system. By installing this feature, everyone in the course will be able to run the same commands, and get the same output - an essential aspect of reproducibility. We hope that you will continue to use the WSL features after the course for your research related computing. The process for installing everything we need here is quite order dependent - follow the steps in the order they appear below. Want More Information? For more information about the Windows Subsystem for Linux, look here . Up to Date Windows 10 Required! To go further with this Installation Guide you need to have an up to date installation of Windows 10. IT Services in the Econ Department have assured us, if you update Windows to the latest version in your UZH laptop everything that follows will work. If you do not have a Windows 10 machine. Contact us!","title":"Windows Subsystem For Linux"},{"location":"windows-wsl/#install-the-windows-subsystem-for-linux","text":"As a first step we need to install the Windows Linux Subsystem. Proceed as follows: Open 'Settings' by searching for it in the search bar In Setting, search for 'Apps & features' Scroll down and click on 'Programs and Features' On the left, click on 'Turn Windows features on or off' Scroll down until you see 'Windows Subsystem for Linux' and click the box, and then click 'OK' A prompt to restart your PC will appear, click 'Restart now' to restart your PC.","title":"Install the Windows Subsystem for Linux"},{"location":"windows-wsl/#installing-a-linux-distribution","text":"We are going to install 'Ubuntu' as our Linux distribution of choice. It is one of the more user friendly choices around. Once your PC has rebooted, proceed as follows: Open the Micrsoft Store by searching for it in the search bar Search for 'Ubuntu' in the Store search bar and press enter Select 'Ubuntu 18.04 LTS' from the choices returned by clicking on it Click 'Get' to install Once installed, if you open the Windows Menu, you will See 'Ubuntu 18.04 LTS' under 'Recently Added' Click on 'Ubuntu 18.04 LTS.' A black terminal will open, and inform you it is installing Once installed, it will prompt you to create an account. Enter a username And a password (Note: as you enter a password nothing will appear) Re-enter the password as instructed The installation will now have completed WSL not enabled If at Step 6, you see the following: This means you have not successfully installed the Windows Subsystem for Linux, or you did not restart your machine as instructed. Try to either: Restart your PC Return here and redo the process.","title":"Installing a Linux Distribution"},{"location":"windows-wsl/#installing-windows-terminal","text":"The terminal that comes with Ubuntu 18.04 LTS out of the box is not our favourite, so we will install something a little better. Proceed as follows: (You should be more comfortable installing stuff from the store now, so we will skip the screenshots) Open the Microsoft Store Search for Windows Terminal Choose the first option - Windows Terminal (Preview) Install it by clicking 'Get' Once installed, you will see it under 'Recently Added' in the Windows menu Open Windows Terminal To get access to your Ubuntu system, click the down arrow in the menu bar Select Ubuntu-18.04, and your Ubuntu terminal will open","title":"Installing Windows Terminal"},{"location":"windows-wsl/#the-way-forward","text":"As you proceed through the remainder of the Installation Guide, you will generally follow the steps for 'Linux Users' and enter the commands into the Ubuntu Terminal we just installed. Occasionally there will be differences between Linux and Windows steps - and these will be clearly marked by a separate header 'Windows Users.'","title":"The Way Forward"}]}